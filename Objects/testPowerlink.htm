<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\testPowerlink.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\testPowerlink.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat May 27 23:05:58 2023
<BR><P>
<H3>Maximum Stack Usage =       2672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eventThread &rArr; eventucal_processEventCircbuf &rArr; eventu_process &rArr; sdoseq_processEvent &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22]">SVC_Handler</a>
 <LI><a href="#[24]">PendSV_Handler</a>
 <LI><a href="#[25]">SysTick_Handler</a>
 <LI><a href="#[19b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[201]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">atomic_inc32</a><BR>
 <LI><a href="#[1d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">NMI_Handler</a><BR>
 <LI><a href="#[1e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">HardFault_Handler</a><BR>
 <LI><a href="#[1f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MemManage_Handler</a><BR>
 <LI><a href="#[20]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">BusFault_Handler</a><BR>
 <LI><a href="#[21]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UsageFault_Handler</a><BR>
 <LI><a href="#[23]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DebugMon_Handler</a><BR>
 <LI><a href="#[38]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC_IRQHandler</a><BR>
 <LI><a href="#[42f]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42f]">osRtxErrorNotify</a><BR>
 <LI><a href="#[ab]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ab]">osRtxIdleThread</a><BR>
 <LI><a href="#[27d]">atomic_dec32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27d]">atomic_dec32</a><BR>
 <LI><a href="#[27f]">atomic_link_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27f]">atomic_link_get</a><BR>
 <LI><a href="#[27e]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">atomic_inc32</a><BR>
 <LI><a href="#[214]">atomic_dec32_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[214]">atomic_dec32_nz</a><BR>
 <LI><a href="#[9e]">Main_Loop_Thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9e]">Main_Loop_Thread</a><BR>
 <LI><a href="#[22f]">atomic_dec16_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22f]">atomic_dec16_nz</a><BR>
 <LI><a href="#[217]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[217]">atomic_inc32</a><BR>
 <LI><a href="#[235]">USART_Control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[235]">USART_Control</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[dd]">HAL_RCC_GetPCLK2Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) referenced from usart_stm32f4xx.o(.rodata.USART1_Resources)
 <LI><a href="#[75]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9f]">LED_Blink_PortE</a> from main.o(.text.LED_Blink_PortE) referenced 2 times from main.o(.text.main)
 <LI><a href="#[9e]">Main_Loop_Thread</a> from main.o(.text.Main_Loop_Thread) referenced 2 times from main.o(.text.main)
 <LI><a href="#[1f]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cd]">SPI2_Control</a> from spi_stm32f4xx.o(.text.SPI2_Control) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[cc]">SPI2_GetDataCount</a> from spi_stm32f4xx.o(.text.SPI2_GetDataCount) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[ce]">SPI2_GetStatus</a> from spi_stm32f4xx.o(.text.SPI2_GetStatus) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from spi_stm32f4xx.o(.text.SPI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c6]">SPI2_Initialize</a> from spi_stm32f4xx.o(.text.SPI2_Initialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[c8]">SPI2_PowerControl</a> from spi_stm32f4xx.o(.text.SPI2_PowerControl) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[ca]">SPI2_Receive</a> from spi_stm32f4xx.o(.text.SPI2_Receive) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[c9]">SPI2_Send</a> from spi_stm32f4xx.o(.text.SPI2_Send) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[cb]">SPI2_Transfer</a> from spi_stm32f4xx.o(.text.SPI2_Transfer) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[c7]">SPI2_Uninitialize</a> from spi_stm32f4xx.o(.text.SPI2_Uninitialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[59]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c5]">SPIX_GetCapabilities</a> from spi_stm32f4xx.o(.text.SPIX_GetCapabilities) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[c4]">SPIX_GetVersion</a> from spi_stm32f4xx.o(.text.SPIX_GetVersion) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[22]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[25]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[28]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c1]">USART1_Callback</a> from main.o(.text.USART1_Callback) referenced 2 times from main.o(.text.uart_init)
 <LI><a href="#[d9]">USART1_Control</a> from usart_stm32f4xx.o(.text.USART1_Control) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d0]">USART1_GetCapabilities</a> from usart_stm32f4xx.o(.text.USART1_GetCapabilities) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[dc]">USART1_GetModemStatus</a> from usart_stm32f4xx.o(.text.USART1_GetModemStatus) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d8]">USART1_GetRxCount</a> from usart_stm32f4xx.o(.text.USART1_GetRxCount) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[da]">USART1_GetStatus</a> from usart_stm32f4xx.o(.text.USART1_GetStatus) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d7]">USART1_GetTxCount</a> from usart_stm32f4xx.o(.text.USART1_GetTxCount) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from usart_stm32f4xx.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d1]">USART1_Initialize</a> from usart_stm32f4xx.o(.text.USART1_Initialize) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d3]">USART1_PowerControl</a> from usart_stm32f4xx.o(.text.USART1_PowerControl) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d5]">USART1_Receive</a> from usart_stm32f4xx.o(.text.USART1_Receive) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d4]">USART1_Send</a> from usart_stm32f4xx.o(.text.USART1_Send) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[db]">USART1_SetModemControl</a> from usart_stm32f4xx.o(.text.USART1_SetModemControl) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d6]">USART1_Transfer</a> from usart_stm32f4xx.o(.text.USART1_Transfer) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[d2]">USART1_Uninitialize</a> from usart_stm32f4xx.o(.text.USART1_Uninitialize) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cf]">USARTx_GetVersion</a> from usart_stm32f4xx.o(.text.USARTx_GetVersion) referenced from usart_stm32f4xx.o(.rodata.Driver_USART1)
 <LI><a href="#[21]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[7d]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[79]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[7a]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[8]">addInstance</a> from dllkcal-circbuf.o(.text.addInstance) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[96]">cbCnCheckEvent</a> from ctrlu.o(.text.cbCnCheckEvent) referenced 2 times from ctrlu.o(.text.initNmtu)
 <LI><a href="#[7e]">cbCnTimer</a> from dllkframe.o(.text.cbCnTimer) referenced 2 times from dllkframe.o(.text.cbCnTimer)
 <LI><a href="#[7e]">cbCnTimer</a> from dllkframe.o(.text.cbCnTimer) referenced 2 times from dllkframe.o(.text.processReceivedSoc)
 <LI><a href="#[81]">cbEventPdoChange</a> from ctrlu.o(.text.cbEventPdoChange) referenced 2 times from ctrlu.o(.text.ctrlu_initStack)
 <LI><a href="#[7f]">cbEventUserObdAccess</a> from ctrlu.o(.text.cbEventUserObdAccess) referenced 2 times from ctrlu.o(.text.ctrlu_initStack)
 <LI><a href="#[97]">cbNmtStateChange</a> from ctrlu.o(.text.cbNmtStateChange) referenced 2 times from ctrlu.o(.text.initNmtu)
 <LI><a href="#[98]">cbObdAccess</a> from ctrlu.o(.text.cbObdAccess) referenced 2 times from ctrlu.o(.text.initObd)
 <LI><a href="#[b6]">cbProcessRpdo</a> from pdokcal.o(.text.cbProcessRpdo) referenced 2 times from pdokcal.o(.text.pdokcal_init)
 <LI><a href="#[b5]">cbProcessTpdo</a> from pdok.o(.text.cbProcessTpdo) referenced 2 times from pdok.o(.text.pdok_init)
 <LI><a href="#[9d]">console_printlogadd</a> from printlog.o(.text.console_printlogadd) referenced 2 times from main.o(.text.main)
 <LI><a href="#[9]">delInstance</a> from dllkcal-circbuf.o(.text.delInstance) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[9b]">dllkframe_processFrameReceived</a> from dllkframe.o(.text.dllkframe_processFrameReceived) referenced 2 times from ctrlk.o(.text.initStack)
 <LI><a href="#[84]">dllkframe_processTransmittedNmtReq</a> from dllkframe.o(.text.dllkframe_processTransmittedNmtReq) referenced 2 times from dllknode.o(.text.dllknode_setupLocalNode)
 <LI><a href="#[85]">dllkframe_processTransmittedNonPlk</a> from dllkframe.o(.text.dllkframe_processTransmittedNonPlk) referenced 2 times from dllknode.o(.text.dllknode_setupLocalNode)
 <LI><a href="#[ec]">doStateCsBasicEthernet</a> from nmtk.o(.text.doStateCsBasicEthernet) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e6]">doStateCsNotActive</a> from nmtk.o(.text.doStateCsNotActive) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[eb]">doStateCsOperational</a> from nmtk.o(.text.doStateCsOperational) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e7]">doStateCsPreOperational1</a> from nmtk.o(.text.doStateCsPreOperational1) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e9]">doStateCsPreOperational2</a> from nmtk.o(.text.doStateCsPreOperational2) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[ea]">doStateCsReadyToOperate</a> from nmtk.o(.text.doStateCsReadyToOperate) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e8]">doStateCsStopped</a> from nmtk.o(.text.doStateCsStopped) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e2]">doStateGsInitialising</a> from nmtk.o(.text.doStateGsInitialising) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e1]">doStateGsOff</a> from nmtk.o(.text.doStateGsOff) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e3]">doStateGsResetApplication</a> from nmtk.o(.text.doStateGsResetApplication) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e4]">doStateGsResetCommunication</a> from nmtk.o(.text.doStateGsResetCommunication) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[e5]">doStateGsResetConfiguration</a> from nmtk.o(.text.doStateGsResetConfiguration) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[ed]">doStateMsNotActive</a> from nmtk.o(.text.doStateMsNotActive) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[ee]">doStateRmsNotActive</a> from nmtk.o(.text.doStateRmsNotActive) referenced from nmtk.o(.rodata.nmtkStates_l)
 <LI><a href="#[91]">eventThread</a> from eventkcal-stm32.o(.text.eventThread) referenced 2 times from eventkcal-stm32.o(.text.eventkcal_init)
 <LI><a href="#[94]">eventThread</a> from eventucal-stm32.o(.text.eventThread) referenced 2 times from eventucal-stm32.o(.text.eventucal_init)
 <LI><a href="#[b]">getDataBlock</a> from dllkcal-circbuf.o(.text.getDataBlock) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[c]">getDataBlockCount</a> from dllkcal-circbuf.o(.text.getDataBlockCount) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[e0]">getDomainSize</a> from obdu.o(.text.getDomainSize) referenced from obdu.o(.rodata.dataTypeSize_l)
 <LI><a href="#[df]">getOstringSize</a> from obdu.o(.text.getOstringSize) referenced from obdu.o(.rodata.dataTypeSize_l)
 <LI><a href="#[de]">getVstringSize</a> from obdu.o(.text.getVstringSize) referenced from obdu.o(.rodata.dataTypeSize_l)
 <LI><a href="#[a]">insertDataBlock</a> from dllkcal-circbuf.o(.text.insertDataBlock) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[bb]">mySPI_callback</a> from main.o(.text.mySPI_callback) referenced 2 times from main.o(.text.spi_init)
 <LI><a href="#[9a]">obdFinishCb</a> from sdocomsrv.o(.text.obdFinishCb) referenced 2 times from sdocomsrv.o(.text.initReadByIndex)
 <LI><a href="#[9a]">obdFinishCb</a> from sdocomsrv.o(.text.obdFinishCb) referenced 2 times from sdocomsrv.o(.text.initWriteByIndex)
 <LI><a href="#[9a]">obdFinishCb</a> from sdocomsrv.o(.text.obdFinishCb) referenced 2 times from sdocomsrv.o(.text.processResponseReadByIndex)
 <LI><a href="#[9a]">obdFinishCb</a> from sdocomsrv.o(.text.obdFinishCb) referenced 2 times from sdocomsrv.o(.text.processResponseWriteByIndex)
 <LI><a href="#[83]">obdal_processSdoRead</a> from obdal.o(.text.obdal_processSdoRead) referenced 2 times from ctrlu.o(.text.ctrlu_initStack)
 <LI><a href="#[82]">obdal_processSdoWrite</a> from obdal.o(.text.obdal_processSdoWrite) referenced 2 times from ctrlu.o(.text.ctrlu_initStack)
 <LI><a href="#[ab]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[bc]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[bd]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced 2 times from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[bf]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[c3]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[c2]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[ac]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[be]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[8a]">processCsFullCycleDllGsInit</a> from dllkstatemachine.o(.text.processCsFullCycleDllGsInit) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[8b]">processCsFullCycleDllWaitPreq</a> from dllkstatemachine.o(.text.processCsFullCycleDllWaitPreq) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[8d]">processCsFullCycleDllWaitSoa</a> from dllkstatemachine.o(.text.processCsFullCycleDllWaitSoa) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[8c]">processCsFullCycleDllWaitSoc</a> from dllkstatemachine.o(.text.processCsFullCycleDllWaitSoc) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[86]">processCsStoppedDllGsInit</a> from dllkstatemachine.o(.text.processCsStoppedDllGsInit) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[87]">processCsStoppedDllWaitPreq</a> from dllkstatemachine.o(.text.processCsStoppedDllWaitPreq) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[89]">processCsStoppedDllWaitSoa</a> from dllkstatemachine.o(.text.processCsStoppedDllWaitSoa) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[88]">processCsStoppedDllWaitSoc</a> from dllkstatemachine.o(.text.processCsStoppedDllWaitSoc) referenced from dllkstatemachine.o(.text.dllkstatemachine_changeState)
 <LI><a href="#[99]">processEvents</a> from event.o(.text.processEvents) referenced 2 times from main.o(.text.initPowerlink)
 <LI><a href="#[80]">processUserEvent</a> from ctrlu.o(.text.processUserEvent) referenced 2 times from ctrlu.o(.text.ctrlu_initStack)
 <LI><a href="#[ba]">receiveCb</a> from sdoseq.o(.text.receiveCb) referenced 2 times from sdoseq.o(.text.sdoseq_init)
 <LI><a href="#[d]">resetDataBlockQueue</a> from dllkcal-circbuf.o(.text.resetDataBlockQueue) referenced 4 times from dllkcal-circbuf.o(.data.funcintf_l)
 <LI><a href="#[7]">sdoAbortTransfer</a> from sdocom-dummy.o(.text.sdoAbortTransfer) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[b9]">sdoAsndCb</a> from sdoasnd.o(.text.sdoAsndCb) referenced 2 times from sdoasnd.o(.text.sdoasnd_init)
 <LI><a href="#[2]">sdoDefineConnection</a> from sdocom-dummy.o(.text.sdoDefineConnection) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[1]">sdoExit</a> from sdocom-dummy.o(.text.sdoExit) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[15]">sdoExit</a> from sdocom-std.o(.text.sdoExit) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[6]">sdoGetNodeId</a> from sdocom-dummy.o(.text.sdoGetNodeId) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[5]">sdoGetState</a> from sdocom-dummy.o(.text.sdoGetState) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[0]">sdoInit</a> from sdocom-dummy.o(.text.sdoInit) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[14]">sdoInit</a> from sdocom-std.o(.text.sdoInit) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[3]">sdoInitTransferByIndex</a> from sdocom-dummy.o(.text.sdoInitTransferByIndex) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[4]">sdoUndefineConnection</a> from sdocom-dummy.o(.text.sdoUndefineConnection) referenced 2 times from sdocom-dummy.o(.data.dummySdoFunctions)
 <LI><a href="#[1b]">sdocomclt_abortTransfer</a> from sdocomclt.o(.text.sdocomclt_abortTransfer) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[16]">sdocomclt_defineConnection</a> from sdocomclt.o(.text.sdocomclt_defineConnection) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[1a]">sdocomclt_getNodeId</a> from sdocomclt.o(.text.sdocomclt_getNodeId) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[19]">sdocomclt_getState</a> from sdocomclt.o(.text.sdocomclt_getState) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[17]">sdocomclt_initTransferByIndex</a> from sdocomclt.o(.text.sdocomclt_initTransferByIndex) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[18]">sdocomclt_undefineConnection</a> from sdocomclt.o(.text.sdocomclt_undefineConnection) referenced 2 times from sdocom-std.o(.data.standardSdoFunctions)
 <LI><a href="#[b8]">sdocomint_conStateChangeCb</a> from sdocom-std.o(.text.sdocomint_conStateChangeCb) referenced 2 times from sdocom-std.o(.text.sdoInit)
 <LI><a href="#[b7]">sdocomint_receiveCb</a> from sdocom-std.o(.text.sdocomint_receiveCb) referenced 2 times from sdocom-std.o(.text.sdoInit)
 <LI><a href="#[90]">signalKernelEvent</a> from eventkcal-stm32.o(.text.signalKernelEvent) referenced 2 times from eventkcal-stm32.o(.text.eventkcal_init)
 <LI><a href="#[92]">signalKernelEvent</a> from eventucal-stm32.o(.text.signalKernelEvent) referenced 2 times from eventucal-stm32.o(.text.eventucal_init)
 <LI><a href="#[8f]">signalUserEvent</a> from eventkcal-stm32.o(.text.signalUserEvent) referenced 2 times from eventkcal-stm32.o(.text.eventkcal_init)
 <LI><a href="#[93]">signalUserEvent</a> from eventucal-stm32.o(.text.signalUserEvent) referenced 2 times from eventucal-stm32.o(.text.eventucal_init)
 <LI><a href="#[a0]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[a1]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[a2]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[a3]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[a4]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[a5]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[a6]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[a7]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[a8]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[a9]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[aa]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[ad]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[ae]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[af]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[b0]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[b1]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[b2]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[b3]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[b4]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced 2 times from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[c0]">syncCb</a> from timesyncu.o(.text.syncCb) referenced 2 times from timesyncu.o(.text.timesyncu_init)
 <LI><a href="#[95]">timerCallback</a> from hrestimer-stm32.o(.text.timerCallback) referenced 2 times from hrestimer-stm32.o(.text.hrestimer_modifyTimer)
 <LI><a href="#[9c]">timesynck_sendSyncEvent</a> from timesynck.o(.text.timesynck_sendSyncEvent) referenced 2 times from ctrlk.o(.text.initStack)
 <LI><a href="#[8e]">workerThread</a> from edrv-rawsock_stm32.o(.text.workerThread) referenced 2 times from edrv-rawsock_stm32.o(.text.edrv_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[50c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[50f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[510]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f6]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[157]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f8]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[fa]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fc]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[511]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[100]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[102]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[103]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[104]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[106]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[108]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[10c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[10e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[512]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[110]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[112]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[114]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[116]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[513]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[130]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[118]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11a]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[514]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[515]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[516]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[517]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[518]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[519]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[51b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[121]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[51c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[51e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[51f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[520]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[521]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[123]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[125]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[522]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[523]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[524]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[525]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[526]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[527]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[528]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[529]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[52a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[52b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[52c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[52d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[f4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[52e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[12b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[12f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[131]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; initPowerlink &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[52f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[134]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[530]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[136]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[126]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ce]"></a>time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
</UL>

<P><STRONG><a name="[13d]"></a>malloc_internal$concurrent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13f]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_allocTxBuffer
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_allocBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocatePdoChannels
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdotestcom_cbEvent
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_allocateMem
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[141]"></a>free_internal$concurrent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[142]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_freeTxBuffer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delInstance
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeBuffer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freePdoChannels
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocatePdoChannels
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdotestcom_cbEvent
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delInstance
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_exit
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_freeProcessImage
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_freeMem
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_deAllocChannelMem
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[143]"></a>vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printlogadd
</UL>

<P><STRONG><a name="[145]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createMessageString
</UL>

<P><STRONG><a name="[147]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateChangeEvent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[148]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getopt
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[149]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
</UL>

<P><STRONG><a name="[14a]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoMapString
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoEventString
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
</UL>

<P><STRONG><a name="[14c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[14d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[14e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[101]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[151]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[153]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[105]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[10d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[154]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[107]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[f9]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[155]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[158]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = strtoul &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getLossSocThresholdCnt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getLossPreqThresholdCnt
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnLossSocError
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnLossPreqError
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnCrcThresholdCnt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnCrcError
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_process
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setSocTime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_freeTxBuffer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_allocTxBuffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupPreqFilter
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_setIdentity
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_storeInitParam
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_readInitParam
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_executeCmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_reset
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_getDataCount
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeBuffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connectBuffer
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_allocBuffer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circBuf_setSignaling
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint64Le
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint56Le
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Le
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint40Le
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint24Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setTimeOfDay
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint64Le
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint56Le
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint48Le
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint48Be
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint40Le
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint24Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Be
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getTimeOfDay
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_initVarEntry
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getType
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDefaultPtr
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postEventCircbuf
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postUserEvent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postKernelEvent
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postError
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_writeErrorObject
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_readErrorObject
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertDataBlock
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlockCount
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlock
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_process
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_cbObdAccess
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_setIdentity
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_config
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_storeInitParam
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_readInitParam
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_sendAsyncFrame
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_getKernelInfo
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_freeMem
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_allocateMem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_getChannel
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_clear
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_addChannel
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_writeRxPdo
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_readTxPdo
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_processRxPdo
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_configureChannel
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_process
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postUserEvent
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postKernelEvent
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_initCon
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_allocateMem
</UL>

<P><STRONG><a name="[531]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getopt
</UL>

<P><STRONG><a name="[46d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
</UL>

<P><STRONG><a name="[4f9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObd
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_storeInitParam
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_readInitParam
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSegm
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPost
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxSegm
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyObjectData
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postError
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_storeInitParam
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_readInitParam
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_writeRxPdo
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_readTxPdo
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFrameToHistory
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCmdFrameDataSegmInit
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_fillCmdFrameDataSegm
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiWrite
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyToMultiBuffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[15f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[532]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_setIdentity
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[533]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_clear
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[535]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdotestcom_cbEvent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[536]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_exit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_exit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTxPdoChannelTables
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRxPdoChannelTables
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_exit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_initMemory
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_deinitMemory
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLowLayerConnection
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_exit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoInit
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_undefineConnection
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[2e2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_exit
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[537]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[165]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacAdrs
</UL>

<P><STRONG><a name="[24f]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[167]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = localtime &rArr; _localtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
</UL>

<P><STRONG><a name="[16b]"></a>strftime</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_findweek
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
</UL>

<P><STRONG><a name="[538]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[539]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[53d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[11d]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[53e]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[172]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11b]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[174]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[544]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_threads.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[150]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[146]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[111]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[113]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[176]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[115]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[117]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[109]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[15b]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[124]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[128]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[17e]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[152]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[15e]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[168]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _localtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[545]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __ARM_get_argv &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[1a9]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[180]"></a>_sys_command_string</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_command_string
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[137]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[546]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[547]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, h1_extend_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[177]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[187]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[178]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[18b]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1a2]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[54a]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[54b]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17a]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[196]"></a>_fopen$locked</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[17f]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[17b]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[173]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[12c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[12a]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[189]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[144]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[183]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[195]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[54c]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[190]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[191]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[18c]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1a0]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, puts_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_modifyTimer
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateChangeEvent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[1a1]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fwrite &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[133]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[198]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[197]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[199]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[19a]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[15d]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[19c]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[19d]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[54d]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fputs_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputs &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[1a8]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1a7]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[1a5]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1ae]"></a>EventRecord2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>

<P><STRONG><a name="[1b1]"></a>EventRecord4</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>

<P><STRONG><a name="[1ab]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1b8]"></a>EvrRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1b9]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ba]"></a>EvrRtxDelayError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[1bb]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[1bc]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1bd]"></a>EvrRtxKernelError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1be]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[1bf]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[1c0]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[1c1]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1c2]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1c3]"></a>EvrRtxKernelStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1c4]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1c5]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[1c6]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1c7]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[1c8]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[1c9]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[1ca]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[1cb]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1cc]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1cd]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1ce]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1cf]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d0]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1d1]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1d2]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1d3]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1d4]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d5]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[1d6]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1d7]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1d8]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d9]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquire &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[1da]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1db]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1dc]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1dd]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[1de]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexDelete &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1df]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexDestroyed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1e0]"></a>EvrRtxMutexError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1e1]"></a>EvrRtxMutexNew</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[1e2]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1e3]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1e4]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[1e5]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquire &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[1e6]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1e7]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1e8]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1e9]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[1ea]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreDelete &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[1eb]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreDestroyed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[1ec]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1ed]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[1ee]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1ef]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreRelease &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1f0]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[1f1]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1f2]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1f3]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[1f4]"></a>EvrRtxThreadError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1f5]"></a>EvrRtxThreadExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[1f6]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1f7]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f8]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[1f9]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[1fa]"></a>EvrRtxThreadNew</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1fb]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[1fc]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[1fd]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1fe]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ff]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[223]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 262 bytes, Stack size 52 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[212]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[211]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[202]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[205]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[204]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.USART1_Resources)
</UL>
<P><STRONG><a name="[206]"></a>IINCHIP_READ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, w5500_conf.o(.text.IINCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[208]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_conf.o(.text.IINCHIP_SpiSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[20b]"></a>IINCHIP_WRITE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, w5500_conf.o(.text.IINCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[210]"></a>LED_Initialize</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, led.o(.text.LED_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LED_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>LED_Off</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop_Thread
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
</UL>

<P><STRONG><a name="[20d]"></a>LED_On</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(.text.LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop_Thread
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
</UL>

<P><STRONG><a name="[462]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4e6]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4e5]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4e4]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>SPI_SendByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_conf.o(.text.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>

<P><STRONG><a name="[3f7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23a]"></a>USART_IRQHandler</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>__user_perthread_libspace</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[f0]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[f2]"></a>_mutex_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[ef]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[f1]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[12e]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[192]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[18e]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[18f]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[194]"></a>_sys_open</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[19e]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[19f]"></a>_sys_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[269]"></a>ami_getTimeOfDay</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ami.o(.text.ami_getTimeOfDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ami_getTimeOfDay &rArr; ami_getUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[26c]"></a>ami_getUint16Be</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint16Be))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint16Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGenericAsyncFrame
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrame
</UL>

<P><STRONG><a name="[26b]"></a>ami_getUint16Le</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint16Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint16Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPreq
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presFrameFormatIsInvalid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getTimeOfDay
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbProcessRpdo
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_processRxPdo
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[26d]"></a>ami_getUint24Le</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint24Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint24Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[26a]"></a>ami_getUint32Le</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint32Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getTimeOfDay
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[26e]"></a>ami_getUint40Le</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint40Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint40Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[26f]"></a>ami_getUint48Be</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint48Be))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
</UL>

<P><STRONG><a name="[270]"></a>ami_getUint48Le</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint48Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint48Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[271]"></a>ami_getUint56Le</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint56Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint56Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[272]"></a>ami_getUint64Le</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ami.o(.text.ami_getUint64Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_getUint64Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>

<P><STRONG><a name="[273]"></a>ami_setTimeOfDay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ami.o(.text.ami_setTimeOfDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ami_setTimeOfDay &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[275]"></a>ami_setUint16Be</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint16Be))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint16Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupPreqFilter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaUnspecReqFilter
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaStatusReqFilter
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaNmtReqFilter
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaIdentReqFilter
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAsndFilter
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
</UL>

<P><STRONG><a name="[274]"></a>ami_setUint16Le</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint16Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint16Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setTimeOfDay
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTxPdo
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameWriteMultiRespAbort
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrSegmSize
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiWrite
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiRead
</UL>

<P><STRONG><a name="[276]"></a>ami_setUint24Le</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint24Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint24Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[258]"></a>ami_setUint32Le</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint32Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setTimeOfDay
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameWriteMultiRespAbort
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameHdrSegmTtlSize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiWrite
</UL>

<P><STRONG><a name="[277]"></a>ami_setUint40Le</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint40Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint40Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[278]"></a>ami_setUint48Be</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint48Be))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupPreqFilter
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSocFilter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaUnspecReqFilter
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaStatusReqFilter
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaNmtReqFilter
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaIdentReqFilter
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaFilter
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
</UL>

<P><STRONG><a name="[279]"></a>ami_setUint48Le</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ami.o(.text.ami_setUint48Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ami_setUint48Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[27a]"></a>ami_setUint56Le</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ami.o(.text.ami_setUint56Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ami_setUint56Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[27b]"></a>ami_setUint64Le</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ami.o(.text.ami_setUint64Le))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ami_setUint64Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
</UL>

<P><STRONG><a name="[2a9]"></a>circBuf_setSignaling</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, circbuffer.o(.text.circBuf_setSignaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = circBuf_setSignaling &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_setSignalingCircbuf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_setSignalingCircbuf
</UL>

<P><STRONG><a name="[266]"></a>circbuf_alloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, circbuffer.o(.text.circbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_allocBuffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_initQueueCircbuf
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_initQueueCircbuf
</UL>

<P><STRONG><a name="[2ab]"></a>circbuf_allocBuffer</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, circbuf-stm32.o(.text.circbuf_allocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = circbuf_allocBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
</UL>

<P><STRONG><a name="[267]"></a>circbuf_connect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, circbuffer.o(.text.circbuf_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = circbuf_connect &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connectBuffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_initQueueCircbuf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
</UL>

<P><STRONG><a name="[2ad]"></a>circbuf_connectBuffer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, circbuf-stm32.o(.text.circbuf_connectBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = circbuf_connectBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
</UL>

<P><STRONG><a name="[2aa]"></a>circbuf_createInstance</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, circbuf-stm32.o(.text.circbuf_createInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
</UL>

<P><STRONG><a name="[2ae]"></a>circbuf_disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, circbuffer.o(.text.circbuf_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = circbuf_disconnect &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnectBuffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exitQueueCircbuf
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delInstance
</UL>

<P><STRONG><a name="[2af]"></a>circbuf_disconnectBuffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, circbuf-stm32.o(.text.circbuf_disconnectBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnect
</UL>

<P><STRONG><a name="[2b0]"></a>circbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, circbuffer.o(.text.circbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeBuffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delInstance
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exitQueueCircbuf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exitQueueCircbuf
</UL>

<P><STRONG><a name="[2b1]"></a>circbuf_freeBuffer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, circbuf-stm32.o(.text.circbuf_freeBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = circbuf_freeBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
</UL>

<P><STRONG><a name="[2ac]"></a>circbuf_freeInstance</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, circbuf-stm32.o(.text.circbuf_freeInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
</UL>

<P><STRONG><a name="[2b2]"></a>circbuf_getDataCount</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, circbuffer.o(.text.circbuf_getDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = circbuf_getDataCount &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlockCount
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_getEventCountCircbuf
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlockCount
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_getEventCountCircbuf
</UL>

<P><STRONG><a name="[2b3]"></a>circbuf_lock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circbuf-stm32.o(.text.circbuf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = circbuf_lock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_reset
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
</UL>

<P><STRONG><a name="[2b4]"></a>circbuf_readData</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, circbuffer.o(.text.circbuf_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = circbuf_readData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlock
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_processEventCircbuf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdotestcom_cbEvent
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataBlock
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_processEventCircbuf
</UL>

<P><STRONG><a name="[2b6]"></a>circbuf_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, circbuffer.o(.text.circbuf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = circbuf_reset &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetDataBlockQueue
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetDataBlockQueue
</UL>

<P><STRONG><a name="[2b5]"></a>circbuf_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, circbuf-stm32.o(.text.circbuf_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_reset
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
</UL>

<P><STRONG><a name="[2b7]"></a>circbuf_writeData</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, circbuffer.o(.text.circbuf_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = circbuf_writeData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertDataBlock
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postEvent
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertDataBlock
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
</UL>

<P><STRONG><a name="[2b8]"></a>circbuf_writeMultipleData</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, circbuffer.o(.text.circbuf_writeMultipleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postEvent
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
</UL>

<P><STRONG><a name="[2b9]"></a>close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, socket.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[9d]"></a>console_printlogadd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printlog.o(.text.console_printlogadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = console_printlogadd &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[2cf]"></a>ctrlk_executeCmd</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ctrlk.o(.text.ctrlk_executeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
</UL>

<P><STRONG><a name="[2d2]"></a>ctrlk_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctrlk.o(.text.ctrlk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ctrlk_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_exit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_exit
</UL>

<P><STRONG><a name="[2d4]"></a>ctrlk_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ctrlk.o(.text.ctrlk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ctrlk_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_exit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupKernelFeatures
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_init
</UL>

<P><STRONG><a name="[2d3]"></a>ctrlkcal_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrlkcal-direct.o(.text.ctrlkcal_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_exit
</UL>

<P><STRONG><a name="[2d5]"></a>ctrlkcal_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrlkcal-direct.o(.text.ctrlkcal_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
</UL>

<P><STRONG><a name="[2d7]"></a>ctrlkcal_readInitParam</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ctrlkcal-direct.o(.text.ctrlkcal_readInitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ctrlkcal_readInitParam &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[2fd]"></a>ctrlkcal_setStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrlkcal-direct.o(.text.ctrlkcal_setStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
</UL>

<P><STRONG><a name="[2d8]"></a>ctrlkcal_storeInitParam</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrlkcal-direct.o(.text.ctrlkcal_storeInitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ctrlkcal_storeInitParam &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[286]"></a>ctrlu_callUserEventCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctrlu.o(.text.ctrlu_callUserEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctrlu_callUserEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processUserEvent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbEventUserObdAccess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbEventPdoChange
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBootEvent
</UL>

<P><STRONG><a name="[2d9]"></a>ctrlu_checkKernelStackInfo</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ctrlu.o(.text.ctrlu_checkKernelStackInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ctrlu_checkKernelStackInfo &rArr; ctrlu_getKernelInfo &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_getKernelInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_create
</UL>

<P><STRONG><a name="[2db]"></a>ctrlu_exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctrlu.o(.text.ctrlu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ctrlu_exit &rArr; ctrlucal_exit &rArr; ctrlk_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_exit
</UL>

<P><STRONG><a name="[41c]"></a>ctrlu_getFeatureFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctrlu.o(.text.ctrlu_getFeatureFlags))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getStackConfiguration
</UL>

<P><STRONG><a name="[2da]"></a>ctrlu_getKernelInfo</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ctrlu.o(.text.ctrlu_getKernelInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ctrlu_getKernelInfo &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_checkKernelStackInfo
</UL>

<P><STRONG><a name="[2de]"></a>ctrlu_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ctrlu.o(.text.ctrlu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ctrlu_init &rArr; ctrlucal_init &rArr; ctrlk_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_exit
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_checkKernelStack
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_initialize
</UL>

<P><STRONG><a name="[2e1]"></a>ctrlu_initStack</STRONG> (Thumb, 320 bytes, Stack size 160 bytes, ctrlu.o(.text.ctrlu_initStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ctrlu_initStack &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncu_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocom_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_registerEventPdoChangeCb
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_storeInitParam
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_readInitParam
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initObd
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNmtu
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_create
</UL>

<P><STRONG><a name="[2f1]"></a>ctrlu_shutdownStack</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ctrlu.o(.text.ctrlu_shutdownStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ctrlu_shutdownStack &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncu_exit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_exit
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocom_exit
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_exit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_exit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_exit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtcnu_exit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_exit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_exit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_exit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlucal_executeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_exit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_destroy
</UL>

<P><STRONG><a name="[415]"></a>ctrlu_stackIsInitialized</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrlu.o(.text.ctrlu_stackIsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_execNmtCommand
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkProcessImageObject
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getProcessImageOut
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getProcessImageIn
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_freeProcessImage
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_readLocalObject
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
</UL>

<P><STRONG><a name="[2e0]"></a>ctrlucal_checkKernelStack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctrlucal-direct.o(.text.ctrlucal_checkKernelStack))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_init
</UL>

<P><STRONG><a name="[2dd]"></a>ctrlucal_executeCmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ctrlucal-direct.o(.text.ctrlucal_executeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_setStatus
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_executeCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_getKernelInfo
</UL>

<P><STRONG><a name="[2dc]"></a>ctrlucal_exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctrlucal-direct.o(.text.ctrlucal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ctrlucal_exit &rArr; ctrlk_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_exit
</UL>

<P><STRONG><a name="[2df]"></a>ctrlucal_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctrlucal-direct.o(.text.ctrlucal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ctrlucal_init &rArr; ctrlk_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_init
</UL>

<P><STRONG><a name="[2e7]"></a>ctrlucal_readInitParam</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ctrlucal-direct.o(.text.ctrlucal_readInitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ctrlucal_readInitParam &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[2e6]"></a>ctrlucal_storeInitParam</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrlucal-direct.o(.text.ctrlucal_storeInitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ctrlucal_storeInitParam &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[37c]"></a>debugstr_getEventSourceStr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, debugstr.o(.text.debugstr_getEventSourceStr))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
</UL>

<P><STRONG><a name="[383]"></a>debugstr_getNmtEventStr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, debugstr.o(.text.debugstr_getNmtEventStr))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
</UL>

<P><STRONG><a name="[382]"></a>debugstr_getNmtStateStr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, debugstr.o(.text.debugstr_getNmtStateStr))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateChangeEvent
</UL>

<P><STRONG><a name="[37d]"></a>debugstr_getRetValStr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, debugstr.o(.text.debugstr_getRetValStr))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[4c0]"></a>delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utility.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
</UL>

<P><STRONG><a name="[4bf]"></a>delay_us</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utility.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
</UL>

<P><STRONG><a name="[306]"></a>dllk_config</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dllk.o(.text.dllk_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dllk_config &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_process
</UL>

<P><STRONG><a name="[307]"></a>dllk_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dllk.o(.text.dllk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dllk_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[308]"></a>dllk_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dllk.o(.text.dllk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dllk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[309]"></a>dllk_postEvent</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, dllk.o(.text.dllk_postEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dllk_postEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoa
</UL>

<P><STRONG><a name="[30a]"></a>dllk_process</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, dllkevent.o(.text.dllk_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSync
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtEvent
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCycleFinish
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtk_process
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNmtEventInDll
</UL>

<P><STRONG><a name="[481]"></a>dllk_regRpdoHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dllk.o(.text.dllk_regRpdoHandler))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_init
</UL>

<P><STRONG><a name="[3e1]"></a>dllk_regSyncHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dllk.o(.text.dllk_regSyncHandler))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[475]"></a>dllk_regTpdoHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dllk.o(.text.dllk_regTpdoHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_exit
</UL>

<P><STRONG><a name="[31a]"></a>dllk_setAsndServiceIdFilter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dllk.o(.text.dllk_setAsndServiceIdFilter))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_process
</UL>

<P><STRONG><a name="[310]"></a>dllk_setIdentity</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dllk.o(.text.dllk_setIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dllk_setIdentity &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_process
</UL>

<P><STRONG><a name="[311]"></a>dllkcal_asyncFrameReceived</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, dllkcal.o(.text.dllkcal_asyncFrameReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dllkcal_asyncFrameReceived &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
</UL>

<P><STRONG><a name="[312]"></a>dllkcal_clearAsyncBuffer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dllkcal.o(.text.dllkcal_clearAsyncBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dllkcal_clearAsyncBuffer &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[313]"></a>dllkcal_exit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dllkcal.o(.text.dllkcal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dllkcal_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[49b]"></a>dllkcal_getAsyncTxCount</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dllkcal.o(.text.dllkcal_getAsyncTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dllkcal_getAsyncTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
</UL>

<P><STRONG><a name="[314]"></a>dllkcal_getAsyncTxFrame</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dllkcal.o(.text.dllkcal_getAsyncTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dllkcal_getAsyncTxFrame &rArr; getGenericAsyncFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGenericAsyncFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
</UL>

<P><STRONG><a name="[316]"></a>dllkcal_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dllkcal.o(.text.dllkcal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dllkcal_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcalcircbuf_getInterface
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[318]"></a>dllkcal_nmtCmdReceived</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, dllkcal.o(.text.dllkcal_nmtCmdReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dllkcal_nmtCmdReceived &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTranslator
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
</UL>

<P><STRONG><a name="[319]"></a>dllkcal_process</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dllkcal.o(.text.dllkcal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dllkcal_process &rArr; dllk_setIdentity &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNodeInstance
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_setIdentity
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_setAsndServiceIdFilter
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_config
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[317]"></a>dllkcalcircbuf_getInterface</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dllkcal-circbuf.o(.text.dllkcalcircbuf_getInterface))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_init
</UL>

<P><STRONG><a name="[31c]"></a>dllkfilter_setupFilters</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dllkfilter.o(.text.dllkfilter_setupFilters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dllkfilter_setupFilters &rArr; setupSoaUnspecReqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSocFilter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaUnspecReqFilter
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaStatusReqFilter
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaNmtReqFilter
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaIdentReqFilter
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSoaFilter
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupAsndFilter
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[324]"></a>dllkfilter_setupPreqFilter</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, dllkfilter.o(.text.dllkfilter_setupPreqFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dllkfilter_setupPreqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLocalNodeCn
</UL>

<P><STRONG><a name="[325]"></a>dllkframe_checkFrame</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dllkframe.o(.text.dllkframe_checkFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dllkframe_checkFrame &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_getMacAddr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint48Be
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
</UL>

<P><STRONG><a name="[327]"></a>dllkframe_createTxFrame</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, dllkframe.o(.text.dllkframe_createTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dllkframe_createTxFrame &rArr; edrv_allocTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_allocTxBuffer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_getMacAddr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint64Le
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[329]"></a>dllkframe_deleteTxFrame</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dllkframe.o(.text.dllkframe_deleteTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dllkframe_deleteTxFrame &rArr; edrv_freeTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_freeTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
</UL>

<P><STRONG><a name="[9b]"></a>dllkframe_processFrameReceived</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, dllkframe.o(.text.dllkframe_processFrameReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dllkframe_processFrameReceived &rArr; processReceivedPreq &rArr; postInvalidFormatError &rArr; errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkstatemachine_changeState
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoa
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPres
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPreq
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Be
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlk.o(.text.initStack)
</UL>
<P><STRONG><a name="[4bd]"></a>dllkframe_processTpdo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dllkframe.o(.text.dllkframe_processTpdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dllkframe_processTpdo
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSyncCn
</UL>

<P><STRONG><a name="[84]"></a>dllkframe_processTransmittedNmtReq</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, dllkframe.o(.text.dllkframe_processTransmittedNmtReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = dllkframe_processTransmittedNmtReq &rArr; eventk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllknode.o(.text.dllknode_setupLocalNode)
</UL>
<P><STRONG><a name="[85]"></a>dllkframe_processTransmittedNonPlk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, dllkframe.o(.text.dllkframe_processTransmittedNonPlk))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = dllkframe_processTransmittedNonPlk &rArr; eventk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllknode.o(.text.dllknode_setupLocalNode)
</UL>
<P><STRONG><a name="[330]"></a>dllkframe_updateFrameAsyncRes</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dllkframe.o(.text.dllkframe_updateFrameAsyncRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dllkframe_updateFrameAsyncRes
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameStatusRes
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameIdentRes
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCycleFinish
</UL>

<P><STRONG><a name="[331]"></a>dllkframe_updateFrameIdentRes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dllkframe.o(.text.dllkframe_updateFrameIdentRes))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameAsyncRes
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[4a2]"></a>dllkframe_updateFramePres</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dllkframe.o(.text.dllkframe_updateFramePres))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dllkframe_updateFramePres
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSyncCn
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[332]"></a>dllkframe_updateFrameStatusRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dllkframe.o(.text.dllkframe_updateFrameStatusRes))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameAsyncRes
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[333]"></a>dllknode_cleanupLocalNode</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dllknode.o(.text.dllknode_cleanupLocalNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dllknode_cleanupLocalNode &rArr; dllkframe_deleteTxFrame &rArr; edrv_freeTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_clearRxMulticastMacAddr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_changeRxFilter
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_deleteTxFrame
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_deleteTimer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[337]"></a>dllknode_setupLocalNode</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, dllknode.o(.text.dllknode_setupLocalNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dllknode_setupLocalNode &rArr; dllkframe_createTxFrame &rArr; edrv_allocTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setCycleTime
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_setRxMulticastMacAddr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_changeRxFilter
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLocalNodeCn
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_clearAsyncBuffer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[288]"></a>dllkstatemachine_changeState</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, dllkstatemachine.o(.text.dllkstatemachine_changeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = dllkstatemachine_changeState &rArr; errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_postError
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbCnTimer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[33c]"></a>dllucal_config</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, dllucal.o(.text.dllucal_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dllucal_config &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
</UL>

<P><STRONG><a name="[2f8]"></a>dllucal_exit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dllucal.o(.text.dllucal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dllucal_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2eb]"></a>dllucal_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dllucal.o(.text.dllucal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = dllucal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucalcircbuf_getInterface
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[33f]"></a>dllucal_process</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dllucal.o(.text.dllucal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dllucal_process &rArr; handleRxAsyncFrameInfo &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrame
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNotRxAsndFrame
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[343]"></a>dllucal_regAsndService</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dllucal.o(.text.dllucal_regAsndService))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAsndServiceIdFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtcnu_exit
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_exit
</UL>

<P><STRONG><a name="[345]"></a>dllucal_sendAsyncFrame</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, dllucal.o(.text.dllucal_sendAsyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGenericAsyncFrame
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_sendData
</UL>

<P><STRONG><a name="[347]"></a>dllucal_setIdentity</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, dllucal.o(.text.dllucal_setIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dllucal_setIdentity &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
</UL>

<P><STRONG><a name="[33e]"></a>dllucalcircbuf_getInterface</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dllucal-circbuf.o(.text.dllucalcircbuf_getInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_init
</UL>

<P><STRONG><a name="[328]"></a>edrv_allocTxBuffer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, edrv-rawsock_stm32.o(.text.edrv_allocTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = edrv_allocTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
</UL>

<P><STRONG><a name="[334]"></a>edrv_changeRxFilter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_changeRxFilter))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
</UL>

<P><STRONG><a name="[336]"></a>edrv_clearRxMulticastMacAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_clearRxMulticastMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
</UL>

<P><STRONG><a name="[348]"></a>edrv_exit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, edrv-rawsock_stm32.o(.text.edrv_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = edrv_exit &rArr; osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[32a]"></a>edrv_freeTxBuffer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, edrv-rawsock_stm32.o(.text.edrv_freeTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = edrv_freeTxBuffer &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_deleteTxFrame
</UL>

<P><STRONG><a name="[326]"></a>edrv_getMacAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_getMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLocalNodeCn
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_createTxFrame
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[34a]"></a>edrv_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, edrv-rawsock_stm32.o(.text.edrv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = edrv_init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacAdrs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[3c6]"></a>edrv_registerHresCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_registerHresCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_modifyTimer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_exit
</UL>

<P><STRONG><a name="[4ee]"></a>edrv_restartTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_restartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallback
</UL>

<P><STRONG><a name="[34f]"></a>edrv_sendTxBuffer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, edrv-rawsock_stm32.o(.text.edrv_sendTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = edrv_sendTxBuffer &rArr; send &rArr; send_data_processing &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLinkStatus
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoa
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPreq
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
</UL>

<P><STRONG><a name="[338]"></a>edrv_setRxMulticastMacAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_setRxMulticastMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[3c8]"></a>edrv_startTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_startTimer))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_modifyTimer
</UL>

<P><STRONG><a name="[3c4]"></a>edrv_stopTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edrv-rawsock_stm32.o(.text.edrv_stopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_deleteTimer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_exit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallback
</UL>

<P><STRONG><a name="[353]"></a>errhndk_decrementCounters</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, errhndk.o(.text.errhndk_decrementCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = errhndk_decrementCounters &rArr; decrementCnCounters &rArr; errhndkcal_getLossSocThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementCnCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCycleFinish
</UL>

<P><STRONG><a name="[354]"></a>errhndk_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, errhndk.o(.text.errhndk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = errhndk_exit &rArr; errhndkcal_exit &rArr; errhndkcal_deinitMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[356]"></a>errhndk_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, errhndk.o(.text.errhndk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = errhndk_init &rArr; errhndkcal_init &rArr; errhndkcal_initMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[33b]"></a>errhndk_postError</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, errhndk.o(.text.errhndk_postError))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkstatemachine_changeState
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postInvalidFormatError
</UL>

<P><STRONG><a name="[358]"></a>errhndk_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, errhndk.o(.text.errhndk_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = errhndk_process &rArr; handleDllErrors &rArr; handleCnLossSoc &rArr; generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[35a]"></a>errhndkcal_deinitMemory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, errhndkcal-local.o(.text.errhndkcal_deinitMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = errhndkcal_deinitMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_exit
</UL>

<P><STRONG><a name="[355]"></a>errhndkcal_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, errhndkcal.o(.text.errhndkcal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = errhndkcal_exit &rArr; errhndkcal_deinitMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_deinitMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_exit
</UL>

<P><STRONG><a name="[35b]"></a>errhndkcal_getCnCrcError</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getCnCrcError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getCnCrcError &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnCrc
</UL>

<P><STRONG><a name="[301]"></a>errhndkcal_getCnCrcThresholdCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getCnCrcThresholdCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getCnCrcThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementCnCounters
</UL>

<P><STRONG><a name="[35c]"></a>errhndkcal_getCnLossPreqError</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getCnLossPreqError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getCnLossPreqError &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossPreq
</UL>

<P><STRONG><a name="[35d]"></a>errhndkcal_getCnLossSocError</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getCnLossSocError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getCnLossSocError &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossSoc
</UL>

<P><STRONG><a name="[35e]"></a>errhndkcal_getLossPreqThresholdCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getLossPreqThresholdCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getLossPreqThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCorrectPreq
</UL>

<P><STRONG><a name="[2ff]"></a>errhndkcal_getLossSocThresholdCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_getLossSocThresholdCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhndkcal_getLossSocThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementCnCounters
</UL>

<P><STRONG><a name="[360]"></a>errhndkcal_getMemPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, errhndkcal-local.o(.text.errhndkcal_getMemPtr))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_init
</UL>

<P><STRONG><a name="[357]"></a>errhndkcal_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, errhndkcal.o(.text.errhndkcal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = errhndkcal_init &rArr; errhndkcal_initMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getMemPtr
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_initMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_init
</UL>

<P><STRONG><a name="[35f]"></a>errhndkcal_initMemory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, errhndkcal-local.o(.text.errhndkcal_initMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = errhndkcal_initMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_init
</UL>

<P><STRONG><a name="[3b7]"></a>errhndkcal_setCnCrcCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setCnCrcCounters))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnCrc
</UL>

<P><STRONG><a name="[302]"></a>errhndkcal_setCnCrcThresholdCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setCnCrcThresholdCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementCnCounters
</UL>

<P><STRONG><a name="[3ba]"></a>errhndkcal_setCnLossPreqCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setCnLossPreqCounters))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossPreq
</UL>

<P><STRONG><a name="[3bc]"></a>errhndkcal_setCnLossSocCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setCnLossSocCounters))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossSoc
</UL>

<P><STRONG><a name="[3be]"></a>errhndkcal_setLossPreqThresholdCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setLossPreqThresholdCnt))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCorrectPreq
</UL>

<P><STRONG><a name="[300]"></a>errhndkcal_setLossSocThresholdCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, errhndkcal.o(.text.errhndkcal_setLossSocThresholdCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementCnCounters
</UL>

<P><STRONG><a name="[291]"></a>errhndu_cbObdAccess</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, errhndu.o(.text.errhndu_cbObdAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = errhndu_cbObdAccess &rArr; errhnducal_writeErrorObject &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_writeErrorObject
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_readErrorObject
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
</UL>

<P><STRONG><a name="[2f9]"></a>errhndu_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, errhndu.o(.text.errhndu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = errhndu_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2ea]"></a>errhndu_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, errhndu.o(.text.errhndu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = errhndu_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhnducal_exit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkErrorCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[363]"></a>errhnducal_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, errhnducal-local.o(.text.errhnducal_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_exit
</UL>

<P><STRONG><a name="[364]"></a>errhnducal_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, errhnducal-local.o(.text.errhnducal_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_init
</UL>

<P><STRONG><a name="[362]"></a>errhnducal_readErrorObject</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, errhnducal-local.o(.text.errhnducal_readErrorObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhnducal_readErrorObject &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_cbObdAccess
</UL>

<P><STRONG><a name="[361]"></a>errhnducal_writeErrorObject</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, errhnducal-local.o(.text.errhnducal_writeErrorObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = errhnducal_writeErrorObject &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_cbObdAccess
</UL>

<P><STRONG><a name="[36b]"></a>eventk_exit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventk.o(.text.eventk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = eventk_exit &rArr; eventkcal_exit &rArr; eventkcal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[36d]"></a>eventk_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventk.o(.text.eventk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[289]"></a>eventk_postError</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, eventk.o(.text.eventk_postError))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = eventk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processTransmittedNonPlk
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processTransmittedNmtReq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbCnTimer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_processEventCircbuf
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[296]"></a>eventk_postEvent</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, eventk.o(.text.eventk_postEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postUserEvent
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postKernelEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postNmtEvent
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postHistoryEntryEvent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_postError
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processTransmittedNonPlk
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processTransmittedNmtReq
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTimeSync
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_nmtCmdReceived
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_asyncFrameReceived
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_postEvent
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbProcessRpdo
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtk_process
</UL>

<P><STRONG><a name="[371]"></a>eventk_process</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, eventk.o(.text.eventk_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = eventk_process &rArr; nmtk_process &rArr; dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_process
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_process
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_process
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_process
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtk_process
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleNmtEventInDll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_processEventCircbuf
</UL>

<P><STRONG><a name="[36c]"></a>eventkcal_exit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eventkcal-stm32.o(.text.eventkcal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = eventkcal_exit &rArr; eventkcal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exitQueueCircbuf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_exit
</UL>

<P><STRONG><a name="[376]"></a>eventkcal_exitQueueCircbuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventkcalintf-circbuf.o(.text.eventkcal_exitQueueCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = eventkcal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exit
</UL>

<P><STRONG><a name="[367]"></a>eventkcal_getEventCountCircbuf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eventkcalintf-circbuf.o(.text.eventkcal_getEventCountCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = eventkcal_getEventCountCircbuf &rArr; circbuf_getDataCount &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_getDataCount
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
</UL>

<P><STRONG><a name="[36e]"></a>eventkcal_init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, eventkcal-stm32.o(.text.eventkcal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_setSignalingCircbuf
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_initQueueCircbuf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exitQueueCircbuf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_init
</UL>

<P><STRONG><a name="[378]"></a>eventkcal_initQueueCircbuf</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, eventkcalintf-circbuf.o(.text.eventkcal_initQueueCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
</UL>

<P><STRONG><a name="[37a]"></a>eventkcal_postEventCircbuf</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, eventkcalintf-circbuf.o(.text.eventkcal_postEventCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postUserEvent
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postKernelEvent
</UL>

<P><STRONG><a name="[36f]"></a>eventkcal_postKernelEvent</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventkcal-stm32.o(.text.eventkcal_postKernelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = eventkcal_postKernelEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>

<P><STRONG><a name="[370]"></a>eventkcal_postUserEvent</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eventkcal-stm32.o(.text.eventkcal_postUserEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>

<P><STRONG><a name="[368]"></a>eventkcal_processEventCircbuf</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, eventkcalintf-circbuf.o(.text.eventkcal_processEventCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = eventkcal_processEventCircbuf &rArr; eventk_process &rArr; nmtk_process &rArr; dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
</UL>

<P><STRONG><a name="[379]"></a>eventkcal_setSignalingCircbuf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eventkcalintf-circbuf.o(.text.eventkcal_setSignalingCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = eventkcal_setSignalingCircbuf &rArr; circBuf_setSignaling &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circBuf_setSignaling
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
</UL>

<P><STRONG><a name="[37b]"></a>eventlog_createErrorEventString</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, eventlogstring.o(.text.eventlog_createErrorEventString))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = eventlog_createErrorEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getEventSourceStr
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getRetValStr
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printErrorEvent
</UL>

<P><STRONG><a name="[37e]"></a>eventlog_createMessageString</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, eventlogstring.o(.text.eventlog_createMessageString))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
</UL>

<P><STRONG><a name="[37f]"></a>eventlog_createPdoEventString</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, eventlogstring.o(.text.eventlog_createPdoEventString))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eventlog_createPdoEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoEvent
</UL>

<P><STRONG><a name="[380]"></a>eventlog_createPdoMapString</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, eventlogstring.o(.text.eventlog_createPdoMapString))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = eventlog_createPdoMapString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoMap
</UL>

<P><STRONG><a name="[381]"></a>eventlog_createStateEventString</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, eventlogstring.o(.text.eventlog_createStateEventString))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eventlog_createStateEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getNmtStateStr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getNmtEventStr
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTimeString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogLevelString
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLogCategoryString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printStateEvent
</UL>

<P><STRONG><a name="[3fc]"></a>eventlog_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, eventlog.o(.text.eventlog_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[384]"></a>eventlog_printErrorEvent</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, eventlog.o(.text.eventlog_printErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = eventlog_printErrorEvent &rArr; eventlog_createErrorEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processErrorWarningEvent
</UL>

<P><STRONG><a name="[386]"></a>eventlog_printMessage</STRONG> (Thumb, 88 bytes, Stack size 288 bytes, eventlog.o(.text.eventlog_printMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createMessageString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[387]"></a>eventlog_printPdoEvent</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, eventlog.o(.text.eventlog_printPdoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = eventlog_printPdoEvent &rArr; eventlog_createPdoEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoEventString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
</UL>

<P><STRONG><a name="[388]"></a>eventlog_printPdoMap</STRONG> (Thumb, 66 bytes, Stack size 288 bytes, eventlog.o(.text.eventlog_printPdoMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = eventlog_printPdoMap &rArr; eventlog_createPdoMapString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoMapString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
</UL>

<P><STRONG><a name="[389]"></a>eventlog_printStateEvent</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, eventlog.o(.text.eventlog_printStateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = eventlog_printStateEvent &rArr; eventlog_createStateEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateChangeEvent
</UL>

<P><STRONG><a name="[2f7]"></a>eventu_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eventu.o(.text.eventu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = eventu_exit &rArr; eventucal_exit &rArr; eventucal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2e8]"></a>eventu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eventu.o(.text.eventu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eventu_init &rArr; eventucal_init &rArr; eventucal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[38c]"></a>eventu_postError</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, eventu.o(.text.eventu_postError))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = eventu_postError &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_processEventCircbuf
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[33d]"></a>eventu_postEvent</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, eventu.o(.text.eventu_postEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postUserEvent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postKernelEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postError
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAsndServiceIdFilter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_setIdentity
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_config
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_sendAsyncFrame
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postSetupPdoBuffers
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postPdokChannelAlloc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postConfigureChannel
</UL>

<P><STRONG><a name="[38f]"></a>eventu_process</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, eventu.o(.text.eventu_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = eventu_process &rArr; sdoseq_processEvent &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdotestcom_cbEvent
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_processEvent
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_processEvent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postError
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callApiEventCb
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_process
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_processEventCircbuf
</UL>

<P><STRONG><a name="[38a]"></a>eventucal_exit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.eventucal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = eventucal_exit &rArr; eventucal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exitQueueCircbuf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_exit
</UL>

<P><STRONG><a name="[394]"></a>eventucal_exitQueueCircbuf</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, eventucalintf-circbuf.o(.text.eventucal_exitQueueCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = eventucal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exit
</UL>

<P><STRONG><a name="[369]"></a>eventucal_getEventCountCircbuf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eventucalintf-circbuf.o(.text.eventucal_getEventCountCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = eventucal_getEventCountCircbuf &rArr; circbuf_getDataCount &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_getDataCount
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
</UL>

<P><STRONG><a name="[38b]"></a>eventucal_init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.eventucal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = eventucal_init &rArr; eventucal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_setSignalingCircbuf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_initQueueCircbuf
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exitQueueCircbuf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_init
</UL>

<P><STRONG><a name="[395]"></a>eventucal_initQueueCircbuf</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, eventucalintf-circbuf.o(.text.eventucal_initQueueCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = eventucal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
</UL>

<P><STRONG><a name="[397]"></a>eventucal_postEventCircbuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eventucalintf-circbuf.o(.text.eventucal_postEventCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postEvent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postUserEvent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postKernelEvent
</UL>

<P><STRONG><a name="[38d]"></a>eventucal_postKernelEvent</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.eventucal_postKernelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = eventucal_postKernelEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postEventCircbuf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>

<P><STRONG><a name="[38e]"></a>eventucal_postUserEvent</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.eventucal_postUserEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postEventCircbuf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>

<P><STRONG><a name="[36a]"></a>eventucal_processEventCircbuf</STRONG> (Thumb, 116 bytes, Stack size 2088 bytes, eventucalintf-circbuf.o(.text.eventucal_processEventCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640 + Unknown Stack Size
<LI>Call Chain = eventucal_processEventCircbuf &rArr; eventu_process &rArr; sdoseq_processEvent &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postError
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
</UL>

<P><STRONG><a name="[396]"></a>eventucal_setSignalingCircbuf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eventucalintf-circbuf.o(.text.eventucal_setSignalingCircbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = eventucal_setSignalingCircbuf &rArr; circBuf_setSignaling &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circBuf_setSignaling
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
</UL>

<P><STRONG><a name="[3ab]"></a>getGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getGAR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[4d5]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w5500.o(.text.getIINCHIP_TxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[3ae]"></a>getPHYCFGR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getPHYCFGR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getPHYCFGR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLinkStatus
</UL>

<P><STRONG><a name="[3af]"></a>getSHAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getSHAR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacAdrs
</UL>

<P><STRONG><a name="[3b2]"></a>getSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getSIPR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[3b3]"></a>getSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getSUBR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[3b4]"></a>getSn_TX_FSR</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500.o(.text.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getSn_TX_FSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[3b1]"></a>getopt</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, getopt.o(.text.getopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = getopt &rArr; __2fprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
</UL>

<P><STRONG><a name="[2c6]"></a>hrestimer_controlExtSyncIrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrestimer-stm32.o(.text.hrestimer_controlExtSyncIrq))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTimeSync
</UL>

<P><STRONG><a name="[335]"></a>hrestimer_deleteTimer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hrestimer-stm32.o(.text.hrestimer_deleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hrestimer_deleteTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_stopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[3c5]"></a>hrestimer_exit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hrestimer-stm32.o(.text.hrestimer_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hrestimer_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_stopTimer
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_registerHresCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[3c7]"></a>hrestimer_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hrestimer-stm32.o(.text.hrestimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hrestimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[28a]"></a>hrestimer_modifyTimer</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, hrestimer-stm32.o(.text.hrestimer_modifyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hrestimer_modifyTimer &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_startTimer
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_registerHresCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbCnTimer
</UL>

<P><STRONG><a name="[207]"></a>iinchip_csoff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500_conf.o(.text.iinchip_csoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iinchip_csoff &rArr; wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[209]"></a>iinchip_cson</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500_conf.o(.text.iinchip_cson))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iinchip_cson &rArr; wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[3ca]"></a>initApp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text.initApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = initApp &rArr; initProcessImage &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fd]"></a>initEvents</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event.o(.text.initEvents))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 168 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = main &rArr; initPowerlink &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownApp
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getVersionString
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getStackConfiguration
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEvents
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initApp
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOptions
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[41e]"></a>memmap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memmap-null.o(.text.memmap_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_initialize
</UL>

<P><STRONG><a name="[3c2]"></a>memmap_mapKernelBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memmap-null.o(.text.memmap_mapKernelBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
</UL>

<P><STRONG><a name="[41a]"></a>memmap_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memmap-null.o(.text.memmap_shutdown))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_exit
</UL>

<P><STRONG><a name="[3c3]"></a>memmap_unmapKernelBuffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memmap-null.o(.text.memmap_unmapKernelBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
</UL>

<P><STRONG><a name="[bb]"></a>mySPI_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.mySPI_callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.spi_init)
</UL>
<P><STRONG><a name="[2f3]"></a>nmtcnu_exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nmtcnu.o(.text.nmtcnu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = nmtcnu_exit &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_regAsndService
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[3cc]"></a>nmtcnu_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nmtcnu.o(.text.nmtcnu_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNmtu
</UL>

<P><STRONG><a name="[3cd]"></a>nmtcnu_registerCheckEventCb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtcnu.o(.text.nmtcnu_registerCheckEventCb))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNmtu
</UL>

<P><STRONG><a name="[4e1]"></a>nmtk_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtk.o(.text.nmtk_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[3df]"></a>nmtk_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nmtk.o(.text.nmtk_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[372]"></a>nmtk_process</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nmtk.o(.text.nmtk_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = nmtk_process &rArr; dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[2f4]"></a>nmtu_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nmtu.o(.text.nmtu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmtu_exit &rArr; timeru_deleteTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[287]"></a>nmtu_getNmtState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nmtu.o(.text.nmtu_getNmtState))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbCnCheckEvent
</UL>

<P><STRONG><a name="[3ce]"></a>nmtu_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtu.o(.text.nmtu_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNmtu
</UL>

<P><STRONG><a name="[3c0]"></a>nmtu_postNmtEvent</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, nmtu.o(.text.nmtu_postNmtEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_execNmtCommand
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processGeneralStateChange
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCnStateChange
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processUserEvent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdResetCmd
</UL>

<P><STRONG><a name="[390]"></a>nmtu_processEvent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nmtu.o(.text.nmtu_processEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = nmtu_processEvent &rArr; processCnStateChange &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processGeneralStateChange
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCnStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[3cf]"></a>nmtu_registerStateChangeCb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtu.o(.text.nmtu_registerStateChangeCb))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNmtu
</UL>

<P><STRONG><a name="[2fb]"></a>obdal_exit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, obdal.o(.text.obdal_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2e5]"></a>obdal_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, obdal.o(.text.obdal_init))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[83]"></a>obdal_processSdoRead</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, obdal.o(.text.obdal_processSdoRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = obdal_processSdoRead &rArr; obdu_processRead &rArr; readByIdxInit &rArr; obdu_readEntryToLe &rArr; ami_setTimeOfDay &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processRead
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessUserObdfromSdo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.ctrlu_initStack)
</UL>
<P><STRONG><a name="[82]"></a>obdal_processSdoWrite</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, obdal.o(.text.obdal_processSdoWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = obdal_processSdoWrite &rArr; obdu_processWrite &rArr; writeByIdxInit &rArr; obdu_writeEntryFromLe &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processWrite
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessUserObdfromSdo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.ctrlu_initStack)
</UL>
<P><STRONG><a name="[3d4]"></a>obdcreate_initObd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, obdcreate.o(.text.obdcreate_initObd))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
</UL>

<P><STRONG><a name="[28c]"></a>obdu_accessOdPart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, obdu.o(.text.obdu_accessOdPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = obdu_accessOdPart &rArr; accessOdPartition &rArr; obdu_initVarEntry &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[3f6]"></a>obdu_defineVar</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, obdu.o(.text.obdu_defineVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = obdu_defineVar &rArr; getEntry &rArr; getIndex &rArr; searchIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarEntry
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkErrorCounter
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
</UL>

<P><STRONG><a name="[2fc]"></a>obdu_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obdu.o(.text.obdu_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2a2]"></a>obdu_getAccessType</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, obdu.o(.text.obdu_getAccessType))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = obdu_getAccessType &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxInit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
</UL>

<P><STRONG><a name="[2a3]"></a>obdu_getDataSize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, obdu.o(.text.obdu_getDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obdu_getDataSize &rArr; getDataSize &rArr; getObjectCurrentPtr &rArr; getObjectSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
</UL>

<P><STRONG><a name="[40a]"></a>obdu_getNodeId</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, obdu.o(.text.obdu_getNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = obdu_getNodeId &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processGeneralStateChange
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
</UL>

<P><STRONG><a name="[2a5]"></a>obdu_getObjectDataPtr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, obdu.o(.text.obdu_getObjectDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = obdu_getObjectDataPtr &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxSegm
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
</UL>

<P><STRONG><a name="[2a1]"></a>obdu_getType</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, obdu.o(.text.obdu_getType))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = obdu_getType &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
</UL>

<P><STRONG><a name="[3d2]"></a>obdu_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, obdu.o(.text.obdu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = obdu_init &rArr; obdu_accessOdPart &rArr; accessOdPartition &rArr; obdu_initVarEntry &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcOdIndexNum
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_accessOdPart
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initObd
</UL>

<P><STRONG><a name="[263]"></a>obdu_initVarEntry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, obdu.o(.text.obdu_initVarEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = obdu_initVarEntry &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>

<P><STRONG><a name="[2a4]"></a>obdu_isNumerical</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, obdu.o(.text.obdu_isNumerical))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNumerical
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxInit
</UL>

<P><STRONG><a name="[407]"></a>obdu_processRead</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, obdu.o(.text.obdu_processRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = obdu_processRead &rArr; readByIdxInit &rArr; obdu_readEntryToLe &rArr; ami_setTimeOfDay &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxSegm
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_processSdoRead
</UL>

<P><STRONG><a name="[409]"></a>obdu_processWrite</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, obdu.o(.text.obdu_processWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = obdu_processWrite &rArr; writeByIdxInit &rArr; obdu_writeEntryFromLe &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxSegm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_processSdoWrite
</UL>

<P><STRONG><a name="[283]"></a>obdu_readEntry</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, obdu.o(.text.obdu_readEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTxPdoChannelTables
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRxPdoChannelTables
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMappingObjects
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxPdoSize
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPdoValidity
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdos
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callPdoChangeCb
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCnStateChange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSdoConfig
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_readLocalObject
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getNodeId
</UL>

<P><STRONG><a name="[410]"></a>obdu_readEntryToLe</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, obdu.o(.text.obdu_readEntryToLe))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = obdu_readEntryToLe &rArr; ami_setTimeOfDay &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint64Le
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint56Le
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Le
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint40Le
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint24Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setTimeOfDay
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByIdxInit
</UL>

<P><STRONG><a name="[411]"></a>obdu_setNodeId</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, obdu.o(.text.obdu_setNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = obdu_setNodeId &rArr; obdu_writeEntry &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObd
</UL>

<P><STRONG><a name="[28b]"></a>obdu_writeEntry</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, obdu.o(.text.obdu_writeEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = obdu_writeEntry &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPost
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_setNodeId
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdVerifyConf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[414]"></a>obdu_writeEntryFromLe</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, obdu.o(.text.obdu_writeEntryFromLe))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = obdu_writeEntryFromLe &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint64Le
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint56Le
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint48Le
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint40Le
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint24Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getTimeOfDay
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPost
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxInit
</UL>

<P><STRONG><a name="[3d7]"></a>oplk_allocProcessImage</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, processimage.o(.text.oplk_allocProcessImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = oplk_allocProcessImage &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_freeProcessImage
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[3d6]"></a>oplk_create</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, generic.o(.text.oplk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = oplk_create &rArr; ctrlu_initStack &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_checkKernelStackInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
</UL>

<P><STRONG><a name="[417]"></a>oplk_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, generic.o(.text.oplk_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = oplk_destroy &rArr; ctrlu_shutdownStack &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
</UL>

<P><STRONG><a name="[418]"></a>oplk_execNmtCommand</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, generic.o(.text.oplk_execNmtCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = oplk_execNmtCommand &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
</UL>

<P><STRONG><a name="[419]"></a>oplk_exit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, generic.o(.text.oplk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = oplk_exit &rArr; ctrlu_shutdownStack &rArr; ctrlucal_executeCmd &rArr; ctrlk_executeCmd &rArr; initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmap_shutdown
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_cleanup
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownPowerlink
</UL>

<P><STRONG><a name="[416]"></a>oplk_freeProcessImage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, processimage.o(.text.oplk_freeProcessImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oplk_freeProcessImage &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownApp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
</UL>

<P><STRONG><a name="[3d8]"></a>oplk_getProcessImageIn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, processimage.o(.text.oplk_getProcessImageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oplk_getProcessImageIn
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[3d9]"></a>oplk_getProcessImageOut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, processimage.o(.text.oplk_getProcessImageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oplk_getProcessImageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[3ff]"></a>oplk_getStackConfiguration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, generic.o(.text.oplk_getStackConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oplk_getStackConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_getFeatureFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fe]"></a>oplk_getVersionString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generic.o(.text.oplk_getVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d5]"></a>oplk_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, generic.o(.text.oplk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = oplk_initialize &rArr; ctrlu_init &rArr; ctrlucal_init &rArr; ctrlk_init &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmap_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_cleanup
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerlink
</UL>

<P><STRONG><a name="[41f]"></a>oplk_linkObject</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, generic.o(.text.oplk_linkObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = oplk_linkObject &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_defineVar
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkProcessImageObject
</UL>

<P><STRONG><a name="[3da]"></a>oplk_linkProcessImageObject</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, processimage.o(.text.oplk_linkProcessImageObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = oplk_linkProcessImageObject &rArr; oplk_linkObject &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initProcessImage
</UL>

<P><STRONG><a name="[420]"></a>oplk_readLocalObject</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, generic.o(.text.oplk_readLocalObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = oplk_readLocalObject &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_stackIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
</UL>

<P><STRONG><a name="[20e]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop_Thread
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_msleep
</UL>

<P><STRONG><a name="[423]"></a>osKernelGetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[427]"></a>osKernelGetTickCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_getTickCount
</UL>

<P><STRONG><a name="[24e]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[402]"></a>osKernelStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[429]"></a>osMessageQueueGet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[42c]"></a>osMessageQueuePut</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[24a]"></a>osMutexAcquire</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lockMutex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[24b]"></a>osMutexDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_freeInstance
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_destroyMutex
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[24c]"></a>osMutexNew</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_createMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[24d]"></a>osMutexRelease</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_unlock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlockMutex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[42f]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[ab]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[249]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[428]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[430]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[433]"></a>osRtxMemoryFree</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[434]"></a>osRtxMemoryInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[3eb]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[435]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_put
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[437]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[43c]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[43e]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[440]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[139]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageObject
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[3e9]"></a>osRtxPostProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[44b]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexObject
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueObject
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[447]"></a>osRtxThreadDispatch</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[439]"></a>osRtxThreadListGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[45b]"></a>osRtxThreadListPut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[453]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[441]"></a>osRtxThreadListSort</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[454]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[43b]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadRegPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackOffsetR0
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[45d]"></a>osRtxThreadStartup</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[459]"></a>osRtxThreadSwitch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[45f]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[43a]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[13a]"></a>osRtxTick_Handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c3]"></a>osRtxTimerSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[c2]"></a>osRtxTimerThread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[366]"></a>osSemaphoreAcquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osSemaphoreAcquire &rArr; isrRtxSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
</UL>

<P><STRONG><a name="[377]"></a>osSemaphoreDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_exit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_exit
</UL>

<P><STRONG><a name="[34d]"></a>osSemaphoreNew</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
</UL>

<P><STRONG><a name="[46a]"></a>osSemaphoreRelease</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalUserEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalKernelEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalUserEvent
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signalKernelEvent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workerThread
</UL>

<P><STRONG><a name="[be]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[248]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[34e]"></a>osThreadNew</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_init
</UL>

<P><STRONG><a name="[349]"></a>osThreadTerminate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
</UL>

<P><STRONG><a name="[46e]"></a>pdok_allocChannelMem</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, pdok.o(.text.pdok_allocChannelMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pdok_allocChannelMem &rArr; pdoklut_clear &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_clear
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disablePdoChannels
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_process
</UL>

<P><STRONG><a name="[471]"></a>pdok_configureChannel</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pdok.o(.text.pdok_configureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pdok_configureChannel &rArr; pdoklut_addChannel &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_addChannel
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_process
</UL>

<P><STRONG><a name="[473]"></a>pdok_deAllocChannelMem</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pdok.o(.text.pdok_deAllocChannelMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pdok_deAllocChannelMem &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_exit
</UL>

<P><STRONG><a name="[474]"></a>pdok_exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pdok.o(.text.pdok_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pdok_exit &rArr; pdokcal_cleanupPdoMem &rArr; pdokcal_freeMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_regTpdoHandler
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_exit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_cleanupPdoMem
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_deAllocChannelMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[3e2]"></a>pdok_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pdok.o(.text.pdok_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pdok_init &rArr; pdokcal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_regTpdoHandler
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[479]"></a>pdok_processRxPdo</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, pdok.o(.text.pdok_processRxPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pdok_processRxPdo &rArr; pdokcal_writeRxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_getChannel
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_writeRxPdo
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_process
</UL>

<P><STRONG><a name="[47b]"></a>pdok_setupPdoBuffers</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pdok.o(.text.pdok_setupPdoBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = pdok_setupPdoBuffers &rArr; pdokcal_initPdoMem &rArr; pdokcal_freeMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_process
</UL>

<P><STRONG><a name="[47d]"></a>pdokcal_allocateMem</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pdokcalmem-local.o(.text.pdokcal_allocateMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pdokcal_allocateMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
</UL>

<P><STRONG><a name="[476]"></a>pdokcal_cleanupPdoMem</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pdokcal-triplebufshm.o(.text.pdokcal_cleanupPdoMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pdokcal_cleanupPdoMem &rArr; pdokcal_freeMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_freeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_exit
</UL>

<P><STRONG><a name="[47f]"></a>pdokcal_closeMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdokcalmem-local.o(.text.pdokcal_closeMem))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_exit
</UL>

<P><STRONG><a name="[477]"></a>pdokcal_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pdokcal.o(.text.pdokcal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdokcal_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_closeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_exit
</UL>

<P><STRONG><a name="[47e]"></a>pdokcal_freeMem</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pdokcalmem-local.o(.text.pdokcal_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pdokcal_freeMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_cleanupPdoMem
</UL>

<P><STRONG><a name="[478]"></a>pdokcal_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pdokcal.o(.text.pdokcal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdokcal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_regRpdoHandler
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_openMem
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_init
</UL>

<P><STRONG><a name="[47c]"></a>pdokcal_initPdoMem</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pdokcal-triplebufshm.o(.text.pdokcal_initPdoMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pdokcal_initPdoMem &rArr; pdokcal_freeMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoMemInfo
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_freeMem
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_allocateMem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_setupPdoBuffers
</UL>

<P><STRONG><a name="[480]"></a>pdokcal_openMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdokcalmem-local.o(.text.pdokcal_openMem))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_init
</UL>

<P><STRONG><a name="[374]"></a>pdokcal_process</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, pdokcal.o(.text.pdokcal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = pdokcal_process &rArr; pdok_processRxPdo &rArr; pdokcal_writeRxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_setupPdoBuffers
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_processRxPdo
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_configureChannel
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[2ca]"></a>pdokcal_readTxPdo</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, pdokcal-triplebufshm.o(.text.pdokcal_readTxPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pdokcal_readTxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTxPdo
</UL>

<P><STRONG><a name="[47a]"></a>pdokcal_writeRxPdo</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pdokcal-triplebufshm.o(.text.pdokcal_writeRxPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pdokcal_writeRxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_processRxPdo
</UL>

<P><STRONG><a name="[472]"></a>pdoklut_addChannel</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, pdoklut.o(.text.pdoklut_addChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pdoklut_addChannel &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_configureChannel
</UL>

<P><STRONG><a name="[46f]"></a>pdoklut_clear</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pdoklut.o(.text.pdoklut_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pdoklut_clear &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
</UL>

<P><STRONG><a name="[2c9]"></a>pdoklut_getChannel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pdoklut.o(.text.pdoklut_getChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pdoklut_getChannel &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_processRxPdo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTxPdo
</UL>

<P><STRONG><a name="[290]"></a>pdou_cbNmtStateChange</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, pdou.o(.text.pdou_cbNmtStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = pdou_cbNmtStateChange &rArr; configureAllPdos &rArr; checkAndConfigurePdos &rArr; checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlockMutex
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lockMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[293]"></a>pdou_cbObdAccess</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, pdou.o(.text.pdou_cbObdAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = pdou_cbObdAccess &rArr; checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPdoValidity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
</UL>

<P><STRONG><a name="[2f6]"></a>pdou_exit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pdou.o(.text.pdou_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pdou_exit &rArr; pdoucal_cleanupPdoMem &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freePdoChannels
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlockMutex
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lockMutex
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_destroyMutex
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_exit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_cleanupPdoMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2ec]"></a>pdou_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pdou.o(.text.pdou_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = pdou_init &rArr; target_createMutex &rArr; osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_createMutex
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[2ed]"></a>pdou_registerEventPdoChangeCb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pdou.o(.text.pdou_registerEventPdoChangeCb))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[48c]"></a>pdoucal_allocateMem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pdoucalmem-local.o(.text.pdoucal_allocateMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pdoucal_allocateMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_msleep
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_initPdoMem
</UL>

<P><STRONG><a name="[488]"></a>pdoucal_cleanupPdoMem</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pdoucal-triplebufshm.o(.text.pdoucal_cleanupPdoMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pdoucal_cleanupPdoMem &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_freeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_initPdoMem
</UL>

<P><STRONG><a name="[48e]"></a>pdoucal_closeMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdoucalmem-local.o(.text.pdoucal_closeMem))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_exit
</UL>

<P><STRONG><a name="[489]"></a>pdoucal_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pdoucal.o(.text.pdoucal_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdoucal_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_closeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
</UL>

<P><STRONG><a name="[48d]"></a>pdoucal_freeMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdoucalmem-local.o(.text.pdoucal_freeMem))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_cleanupPdoMem
</UL>

<P><STRONG><a name="[48b]"></a>pdoucal_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pdoucal.o(.text.pdoucal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdoucal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_openMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_init
</UL>

<P><STRONG><a name="[2c3]"></a>pdoucal_initPdoMem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pdoucal-triplebufshm.o(.text.pdoucal_initPdoMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = pdoucal_initPdoMem &rArr; pdoucal_allocateMem &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_allocateMem
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_cleanupPdoMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[48f]"></a>pdoucal_openMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pdoucalmem-local.o(.text.pdoucal_openMem))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_init
</UL>

<P><STRONG><a name="[2c4]"></a>pdoucal_postConfigureChannel</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, pdoucal.o(.text.pdoucal_postConfigureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = pdoucal_postConfigureChannel &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configurePdoChannel
</UL>

<P><STRONG><a name="[2bf]"></a>pdoucal_postPdokChannelAlloc</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, pdoucal.o(.text.pdoucal_postPdokChannelAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = pdoucal_postPdokChannelAlloc &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[2c1]"></a>pdoucal_postSetupPdoBuffers</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, pdoucal.o(.text.pdoucal_postSetupPdoBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = pdoucal_postSetupPdoBuffers &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[99]"></a>processEvents</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, event.o(.text.processEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = processEvents &rArr; processPdoChangeEvent &rArr; eventlog_printPdoMap &rArr; eventlog_createPdoMapString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateChangeEvent
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPdoChangeEvent
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processErrorWarningEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.initPowerlink)
</UL>
<P><STRONG><a name="[4be]"></a>recvfrom</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, socket.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = recvfrom &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workerThread
</UL>

<P><STRONG><a name="[3fa]"></a>reset_w5500</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500_conf.o(.text.reset_w5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_w5500 &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[304]"></a>sdoasnd_deleteCon</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdoasnd.o(.text.sdoasnd_deleteCon))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLowLayerConnection
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
</UL>

<P><STRONG><a name="[4c3]"></a>sdoasnd_exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdoasnd.o(.text.sdoasnd_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sdoasnd_exit &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_regAsndService
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_exit
</UL>

<P><STRONG><a name="[4c4]"></a>sdoasnd_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdoasnd.o(.text.sdoasnd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sdoasnd_init &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_regAsndService
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_init
</UL>

<P><STRONG><a name="[4c5]"></a>sdoasnd_initCon</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sdoasnd.o(.text.sdoasnd_initCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdoasnd_initCon &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
</UL>

<P><STRONG><a name="[4c6]"></a>sdoasnd_sendData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sdoasnd.o(.text.sdoasnd_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_sendAsyncFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToLowerLayer
</UL>

<P><STRONG><a name="[2f2]"></a>sdocom_exit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdocom.o(.text.sdocom_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdocom_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2f0]"></a>sdocom_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdocom.o(.text.sdocom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdocom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomstandard_getInterface
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomdummy_getInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[1b]"></a>sdocomclt_abortTransfer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_abortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = sdocomclt_abortTransfer &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[16]"></a>sdocomclt_defineConnection</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_defineConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = sdocomclt_defineConnection &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[1a]"></a>sdocomclt_getNodeId</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sdocomclt.o(.text.sdocomclt_getNodeId))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[19]"></a>sdocomclt_getState</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, sdocomclt.o(.text.sdocomclt_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdocomclt_getState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[17]"></a>sdocomclt_initTransferByIndex</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_initTransferByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = sdocomclt_initTransferByIndex &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiWrite
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMultiRead
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSingleTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[4cc]"></a>sdocomclt_processStateConnected</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_processStateConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = sdocomclt_processStateConnected &rArr; processFrame &rArr; processMultiReadResp &rArr; sendSdoAbort &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTransferAfterTx
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferFinished
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>

<P><STRONG><a name="[4cf]"></a>sdocomclt_processStateSegmTransfer</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_processStateSegmTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = sdocomclt_processStateSegmTransfer &rArr; processFrame &rArr; processMultiReadResp &rArr; sendSdoAbort &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTransferAfterTx
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferFinished
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>

<P><STRONG><a name="[4d0]"></a>sdocomclt_processStateWaitInit</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_processStateWaitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = sdocomclt_processStateWaitInit &rArr; sendSdo &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferFinished
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>

<P><STRONG><a name="[18]"></a>sdocomclt_undefineConnection</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdocomclt.o(.text.sdocomclt_undefineConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = sdocomclt_undefineConnection &rArr; sdoseq_deleteCon &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[4c7]"></a>sdocomdummy_getInterface</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdocomdummy_getInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocom_init
</UL>

<P><STRONG><a name="[b8]"></a>sdocomint_conStateChangeCb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdocomint_conStateChangeCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = sdocomint_conStateChangeCb &rArr; sdocomint_processCmdLayerConnection &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processCmdLayerConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.text.sdoInit)
</UL>
<P><STRONG><a name="[4d2]"></a>sdocomint_fillCmdFrameDataSegm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdocomint_fillCmdFrameDataSegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdocomint_fillCmdFrameDataSegm
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>

<P><STRONG><a name="[257]"></a>sdocomint_initCmdFrameGeneric</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdocom-std.o(.text.sdocomint_initCmdFrameGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sdocomint_initCmdFrameGeneric
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>

<P><STRONG><a name="[4d7]"></a>sdocomint_overwriteCmdFrameHdrFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-std.o(.text.sdocomint_overwriteCmdFrameHdrFlags))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckResponseFrame
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>

<P><STRONG><a name="[4d1]"></a>sdocomint_processCmdLayerConnection</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sdocom-std.o(.text.sdocomint_processCmdLayerConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = sdocomint_processCmdLayerConnection &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_receiveCb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_conStateChangeCb
</UL>

<P><STRONG><a name="[4c9]"></a>sdocomint_processState</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdocomint_processState))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateWaitInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processCmdLayerConnection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_initTransferByIndex
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_defineConnection
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_abortTransfer
</UL>

<P><STRONG><a name="[b7]"></a>sdocomint_receiveCb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdocomint_receiveCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = sdocomint_receiveCb &rArr; sdocomint_processCmdLayerConnection &rArr; sdocomint_processState &rArr; processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processCmdLayerConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.text.sdoInit)
</UL>
<P><STRONG><a name="[259]"></a>sdocomint_setCmdFrameHdrFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdocom-std.o(.text.sdocomint_setCmdFrameHdrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
</UL>

<P><STRONG><a name="[25a]"></a>sdocomint_setCmdFrameHdrSegmSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdocomint_setCmdFrameHdrSegmSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdocomint_setCmdFrameHdrSegmSize &rArr; ami_setUint16Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>

<P><STRONG><a name="[254]"></a>sdocomint_updateHdlTransfSize</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sdocom-std.o(.text.sdocomint_updateHdlTransfSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdocomint_updateHdlTransfSize &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTransferAfterTx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteMultiByIndex
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteByIndex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTransferAfterTx
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[4b7]"></a>sdocomsrv_initCon</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sdocomsrv.o(.text.sdocomsrv_initCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
</UL>

<P><STRONG><a name="[4d3]"></a>sdocomsrv_processStateServerSegmTrans</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, sdocomsrv.o(.text.sdocomsrv_processStateServerSegmTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = sdocomsrv_processStateServerSegmTrans &rArr; processResponseReadByIndex &rArr; finishReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTransferAfterTx
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>

<P><STRONG><a name="[4c8]"></a>sdocomstandard_getInterface</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdocom-std.o(.text.sdocomstandard_getInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocom_init
</UL>

<P><STRONG><a name="[406]"></a>sdoseq_deleteCon</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdoseq.o(.text.sdoseq_deleteCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = sdoseq_deleteCon &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLowLayerConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_undefineConnection
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateWaitInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
</UL>

<P><STRONG><a name="[4c1]"></a>sdoseq_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdoseq.o(.text.sdoseq_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sdoseq_exit &rArr; sdoasnd_exit &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_exit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoExit
</UL>

<P><STRONG><a name="[4c2]"></a>sdoseq_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdoseq.o(.text.sdoseq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sdoseq_init &rArr; sdoasnd_init &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoInit
</UL>

<P><STRONG><a name="[4ca]"></a>sdoseq_initCon</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sdoseq.o(.text.sdoseq_initCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = sdoseq_initCon &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_initCon
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_deleteCon
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateWaitInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_defineConnection
</UL>

<P><STRONG><a name="[391]"></a>sdoseq_processEvent</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sdoseq.o(.text.sdoseq_processEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = sdoseq_processEvent &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[25b]"></a>sdoseq_sendData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sdoseq.o(.text.sdoseq_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forceRetransmissionRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckResponseFrame
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteByIndex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdo
</UL>

<P><STRONG><a name="[4fa]"></a>sdoseq_setTimeout</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sdoseq.o(.text.sdoseq_setTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSdoConfig
</UL>

<P><STRONG><a name="[393]"></a>sdotestcom_cbEvent</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sdotest-com.o(.text.sdotestcom_cbEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sdotestcom_cbEvent &rArr; circbuf_readData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[351]"></a>send</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, socket.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = send &rArr; send_data_processing &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
</UL>

<P><STRONG><a name="[4d6]"></a>send_data_processing</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, w5500.o(.text.send_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = send_data_processing &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[4db]"></a>setGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setGAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[4dc]"></a>setSHAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSHAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
</UL>

<P><STRONG><a name="[4dd]"></a>setSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSIPR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[4de]"></a>setSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSUBR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[20c]"></a>set_w5500_ip</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, w5500_conf.o(.text.set_w5500_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
</UL>

<P><STRONG><a name="[3fb]"></a>set_w5500_mac</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w5500_conf.o(.text.set_w5500_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_w5500_mac &rArr; setSHAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[400]"></a>shutdownApp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text.shutdownApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = shutdownApp &rArr; oplk_freeProcessImage &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_freeProcessImage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34c]"></a>socket</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, socket.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
</UL>

<P><STRONG><a name="[3f9]"></a>spi_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>spi_send_byte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>

<P><STRONG><a name="[250]"></a>stdout_putchar</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stdout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[41b]"></a>target_cleanup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target-stm32.o(.text.target_cleanup))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_initialize
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_exit
</UL>

<P><STRONG><a name="[48a]"></a>target_createMutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, target-mutex.o(.text.target_createMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = target_createMutex &rArr; osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_init
</UL>

<P><STRONG><a name="[487]"></a>target_destroyMutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, target-mutex.o(.text.target_destroyMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = target_destroyMutex &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
</UL>

<P><STRONG><a name="[4ed]"></a>target_enableGlobalInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, target-stm32.o(.text.target_enableGlobalInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lock
</UL>

<P><STRONG><a name="[4ec]"></a>target_getTickCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, target-stm32.o(.text.target_getTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = target_getTickCount &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_setTimer
</UL>

<P><STRONG><a name="[41d]"></a>target_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target-stm32.o(.text.target_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_initialize
</UL>

<P><STRONG><a name="[483]"></a>target_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, target-mutex.o(.text.target_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = target_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_enableGlobalInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setSocTime
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_writeRxPdo
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_readTxPdo
</UL>

<P><STRONG><a name="[485]"></a>target_lockMutex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, target-mutex.o(.text.target_lockMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = target_lockMutex &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
</UL>

<P><STRONG><a name="[2c2]"></a>target_msleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, target-stm32.o(.text.target_msleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = target_msleep &rArr; osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_allocateMem
</UL>

<P><STRONG><a name="[484]"></a>target_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, target-mutex.o(.text.target_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = target_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_enableGlobalInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setSocTime
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_writeRxPdo
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_readTxPdo
</UL>

<P><STRONG><a name="[486]"></a>target_unlockMutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, target-mutex.o(.text.target_unlockMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = target_unlockMutex &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
</UL>

<P><STRONG><a name="[305]"></a>timeru_deleteTimer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timer-stm32user.o(.text.timeru_deleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeru_deleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_modifyTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_processEvent
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_processEvent
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_exit
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit3
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit2
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLowLayerConnection
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_exit
</UL>

<P><STRONG><a name="[2fa]"></a>timeru_exit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer-stm32user.o(.text.timeru_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = timeru_exit &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2e9]"></a>timeru_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timer-stm32user.o(.text.timeru_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = timeru_init &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[4df]"></a>timeru_modifyTimer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer-stm32user.o(.text.timeru_modifyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = timeru_modifyTimer &rArr; timeru_setTimer &rArr; target_getTickCount &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupNmtTimerEvent
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[4e0]"></a>timeru_setTimer</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, timer-stm32user.o(.text.timeru_setTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = timeru_setTimer &rArr; target_getTickCount &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_getTickCount
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_modifyTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[4e2]"></a>timesynck_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timesynck.o(.text.timesynck_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timesynck_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownStack
</UL>

<P><STRONG><a name="[3e0]"></a>timesynck_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timesynck.o(.text.timesynck_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = timesynck_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_getSharedMemory
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>

<P><STRONG><a name="[375]"></a>timesynck_process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timesynck.o(.text.timesynck_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = timesynck_process &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_controlSync
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[9c]"></a>timesynck_sendSyncEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timesynck.o(.text.timesynck_sendSyncEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timesynck_sendSyncEvent &rArr; timesynckcal_sendSyncEvent &rArr; timesyncucal_callSyncCb
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_sendSyncEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlk.o(.text.initStack)
</UL>
<P><STRONG><a name="[339]"></a>timesynck_setCycleTime</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timesynck.o(.text.timesynck_setCycleTime))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[4a4]"></a>timesynck_setSocTime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timesynck.o(.text.timesynck_setSocTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = timesynck_setSocTime &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_lock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedSoc
</UL>

<P><STRONG><a name="[4f3]"></a>timesynckcal_controlSync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timesynckcal-local.o(.text.timesynckcal_controlSync))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_process
</UL>

<P><STRONG><a name="[4f0]"></a>timesynckcal_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timesynckcal-local.o(.text.timesynckcal_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_exit
</UL>

<P><STRONG><a name="[4f2]"></a>timesynckcal_getSharedMemory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timesynckcal-local.o(.text.timesynckcal_getSharedMemory))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_init
</UL>

<P><STRONG><a name="[4f1]"></a>timesynckcal_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timesynckcal-local.o(.text.timesynckcal_init))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_init
</UL>

<P><STRONG><a name="[4f4]"></a>timesynckcal_sendSyncEvent</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timesynckcal-local.o(.text.timesynckcal_sendSyncEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timesynckcal_sendSyncEvent &rArr; timesyncucal_callSyncCb
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncucal_callSyncCb
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_sendSyncEvent
</UL>

<P><STRONG><a name="[2f5]"></a>timesyncu_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timesyncu.o(.text.timesyncu_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timesyncu_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncucal_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
</UL>

<P><STRONG><a name="[2ee]"></a>timesyncu_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timesyncu.o(.text.timesyncu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timesyncu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncucal_init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncucal_getSharedMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[4f5]"></a>timesyncucal_callSyncCb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timesyncucal-local.o(.text.timesyncucal_callSyncCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timesyncucal_callSyncCb
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynckcal_sendSyncEvent
</UL>

<P><STRONG><a name="[4f6]"></a>timesyncucal_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timesyncucal-local.o(.text.timesyncucal_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncu_exit
</UL>

<P><STRONG><a name="[4f8]"></a>timesyncucal_getSharedMemory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timesyncucal-local.o(.text.timesyncucal_getSharedMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncu_init
</UL>

<P><STRONG><a name="[4f7]"></a>timesyncucal_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timesyncucal-local.o(.text.timesyncucal_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesyncu_init
</UL>

<P><STRONG><a name="[265]"></a>trace</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, trace-printf.o(.text.trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setSocTime
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedAsnd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addInstance
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_clearAsyncBuffer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_executeCmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_lock
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_createInstance
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_allocBuffer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processGeneralStateChange
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_initQueueCircbuf
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_processEvent
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGenericAsyncFrame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkObject
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_shutdownStack
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_checkKernelStackInfo
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_allocateMem
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_processEventCircbuf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_postEventCircbuf
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_initQueueCircbuf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_getEventCountCircbuf
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_exit
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_initPdoMem
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_cleanupPdoMem
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventThread
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
</UL>

<P><STRONG><a name="[3f8]"></a>uart_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c9]"></a>wiz_cs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w5500_conf.o(.text.wiz_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
</UL>

<P><STRONG><a name="[3ac]"></a>wiz_read_buf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5500_conf.o(.text.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSHAR
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPHYCFGR
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[4da]"></a>wiz_write_buf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5500_conf.o(.text.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
</UL>

<P><STRONG><a name="[184]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4fd]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[4fc]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[4fe]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[4ff]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[185]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[186]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[500]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[188]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[156]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7d]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[503]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[54e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[501]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[54f]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[504]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[550]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[505]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[551]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[502]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[552]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[506]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[507]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[553]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[508]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[554]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[509]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjectRange
</UL>

<P><STRONG><a name="[50a]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjectRange
</UL>

<P><STRONG><a name="[50b]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[119]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[555]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[556]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[fb]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[ff]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9f]"></a>LED_Blink_PortE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text.LED_Blink_PortE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LED_Blink_PortE &rArr; set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[9e]"></a>Main_Loop_Thread</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text.Main_Loop_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = Main_Loop_Thread &rArr;  Main_Loop_Thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop_Thread
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop_Thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c1]"></a>USART1_Callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text.USART1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.uart_init)
</UL>
<P><STRONG><a name="[3b0]"></a>getOptions</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, main.o(.text.getOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = getOptions &rArr; strtoul &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getopt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d3]"></a>initPowerlink</STRONG> (Thumb, 456 bytes, Stack size 304 bytes, main.o(.text.initPowerlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = initPowerlink &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_initialize
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_create
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdcreate_initObd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getRetValStr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[401]"></a>shutdownPowerlink</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text.shutdownPowerlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = shutdownPowerlink &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_exit
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_execNmtCommand
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_destroy
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d0]"></a>initStack</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ctrlk.o(.text.initStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = initStack &rArr; eventk_init &rArr; eventkcal_init &rArr; eventkcal_initQueueCircbuf &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtk_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_getMacAddr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_regSyncHandler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_storeInitParam
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlkcal_readInitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_executeCmd
</UL>

<P><STRONG><a name="[2d6]"></a>setupKernelFeatures</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrlk.o(.text.setupKernelFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_init
</UL>

<P><STRONG><a name="[2d1]"></a>shutdownStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrlk.o(.text.shutdownStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = shutdownStack &rArr; eventk_exit &rArr; eventkcal_exit &rArr; eventkcal_exitQueueCircbuf &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_exit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_exit
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtk_exit
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_exit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_exit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_exit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_exit
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_exit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlk_executeCmd
</UL>

<P><STRONG><a name="[2bb]"></a>checkNodeIdList</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dllkcal.o(.text.checkNodeIdList))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTranslator
</UL>

<P><STRONG><a name="[2ba]"></a>commandTranslator</STRONG> (Thumb, 632 bytes, Stack size 8 bytes, dllkcal.o(.text.commandTranslator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = commandTranslator
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkNodeIdList
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_nmtCmdReceived
</UL>

<P><STRONG><a name="[315]"></a>getGenericAsyncFrame</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dllkcal.o(.text.getGenericAsyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getGenericAsyncFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_getAsyncTxFrame
</UL>

<P><STRONG><a name="[31b]"></a>initNodeInstance</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dllkcal.o(.text.initNodeInstance))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_process
</UL>

<P><STRONG><a name="[8]"></a>addInstance</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dllkcal-circbuf.o(.text.addInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = addInstance &rArr; circbuf_alloc &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[9]"></a>delInstance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dllkcal-circbuf.o(.text.delInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = delInstance &rArr; circbuf_free &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[b]"></a>getDataBlock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dllkcal-circbuf.o(.text.getDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = getDataBlock &rArr; circbuf_readData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[c]"></a>getDataBlockCount</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dllkcal-circbuf.o(.text.getDataBlockCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = getDataBlockCount &rArr; circbuf_getDataCount &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_getDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[a]"></a>insertDataBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dllkcal-circbuf.o(.text.insertDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = insertDataBlock &rArr; circbuf_writeData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[d]"></a>resetDataBlockQueue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dllkcal-circbuf.o(.text.resetDataBlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = resetDataBlockQueue &rArr; circbuf_reset &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkcal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[2c5]"></a>controlTimeSync</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, dllkevent.o(.text.controlTimeSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_controlExtSyncIrq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[30f]"></a>processCycleFinish</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dllkevent.o(.text.processCycleFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = processCycleFinish &rArr; errhndk_decrementCounters &rArr; decrementCnCounters &rArr; errhndkcal_getLossSocThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_decrementCounters
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameAsyncRes
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtEvent
</UL>

<P><STRONG><a name="[30d]"></a>processFillTx</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, dllkevent.o(.text.processFillTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = processFillTx &rArr; edrv_sendTxBuffer &rArr; send &rArr; send_data_processing &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_checkFrame
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_getAsyncTxFrame
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_getAsyncTxCount
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processNmtStateChange
</UL>

<P><STRONG><a name="[30b]"></a>processNmtEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dllkevent.o(.text.processNmtEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = processNmtEvent &rArr; processCycleFinish &rArr; errhndk_decrementCounters &rArr; decrementCnCounters &rArr; errhndkcal_getLossSocThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCycleFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
</UL>

<P><STRONG><a name="[30e]"></a>processNmtStateChange</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, dllkevent.o(.text.processNmtStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_deleteTimer
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_cleanupLocalNode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameStatusRes
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFramePres
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFrameIdentRes
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFillTx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTimeSync
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
</UL>

<P><STRONG><a name="[30c]"></a>processSync</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dllkevent.o(.text.processSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = processSync &rArr; processSyncCn &rArr; dllkframe_updateFramePres
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSyncCn
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
</UL>

<P><STRONG><a name="[4bc]"></a>processSyncCn</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, dllkevent.o(.text.processSyncCn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = processSyncCn &rArr; dllkframe_updateFramePres
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_updateFramePres
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processTpdo
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSync
</UL>

<P><STRONG><a name="[31d]"></a>setupAsndFilter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dllkfilter.o(.text.setupAsndFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = setupAsndFilter &rArr; ami_setUint16Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[31f]"></a>setupSoaFilter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dllkfilter.o(.text.setupSoaFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = setupSoaFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[320]"></a>setupSoaIdentReqFilter</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dllkfilter.o(.text.setupSoaIdentReqFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = setupSoaIdentReqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[322]"></a>setupSoaNmtReqFilter</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dllkfilter.o(.text.setupSoaNmtReqFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = setupSoaNmtReqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[321]"></a>setupSoaStatusReqFilter</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dllkfilter.o(.text.setupSoaStatusReqFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = setupSoaStatusReqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[323]"></a>setupSoaUnspecReqFilter</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dllkfilter.o(.text.setupSoaUnspecReqFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = setupSoaUnspecReqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[31e]"></a>setupSocFilter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dllkfilter.o(.text.setupSocFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = setupSocFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint48Be
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupFilters
</UL>

<P><STRONG><a name="[7e]"></a>cbCnTimer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dllkframe.o(.text.cbCnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = cbCnTimer &rArr; eventk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_modifyTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postError
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkstatemachine_changeState
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dllkframe.o(.text.processReceivedSoc)
<LI> dllkframe.o(.text.cbCnTimer)
</UL>
<P><STRONG><a name="[4a3]"></a>forwardRpdo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dllkframe.o(.text.forwardRpdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forwardRpdo
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPres
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPreq
</UL>

<P><STRONG><a name="[490]"></a>postInvalidFormatError</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, dllkframe.o(.text.postInvalidFormatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = postInvalidFormatError &rArr; errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_postError
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPres
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPreq
</UL>

<P><STRONG><a name="[493]"></a>presFrameFormatIsInvalid</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dllkframe.o(.text.presFrameFormatIsInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = presFrameFormatIsInvalid &rArr; ami_getUint16Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPres
</UL>

<P><STRONG><a name="[32e]"></a>processReceivedAsnd</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, dllkframe.o(.text.processReceivedAsnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = processReceivedAsnd &rArr; dllkcal_nmtCmdReceived &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_nmtCmdReceived
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkcal_asyncFrameReceived
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_getMacAddr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint48Be
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[32c]"></a>processReceivedPreq</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, dllkframe.o(.text.processReceivedPreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = processReceivedPreq &rArr; postInvalidFormatError &rArr; errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postInvalidFormatError
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardRpdo
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[32d]"></a>processReceivedPres</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dllkframe.o(.text.processReceivedPres))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = processReceivedPres &rArr; postInvalidFormatError &rArr; errhndk_postError &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;presFrameFormatIsInvalid
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postInvalidFormatError
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardRpdo
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[32f]"></a>processReceivedSoa</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, dllkframe.o(.text.processReceivedSoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = processReceivedSoa &rArr; dllk_postEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[32b]"></a>processReceivedSoc</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, dllkframe.o(.text.processReceivedSoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = processReceivedSoc &rArr; dllk_postEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timesynck_setSocTime
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrestimer_modifyTimer
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_postEvent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint64Le
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkframe_processFrameReceived
</UL>

<P><STRONG><a name="[33a]"></a>setupLocalNodeCn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dllknode.o(.text.setupLocalNodeCn))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = setupLocalNodeCn &rArr; dllkfilter_setupPreqFilter &rArr; ami_setUint48Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllkfilter_setupPreqFilter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_getMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllknode_setupLocalNode
</UL>

<P><STRONG><a name="[8a]"></a>processCsFullCycleDllGsInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dllkstatemachine.o(.text.processCsFullCycleDllGsInit))
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[8b]"></a>processCsFullCycleDllWaitPreq</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsFullCycleDllWaitPreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsFullCycleDllWaitPreq
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[8d]"></a>processCsFullCycleDllWaitSoa</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsFullCycleDllWaitSoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsFullCycleDllWaitSoa
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventByFrameSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[8c]"></a>processCsFullCycleDllWaitSoc</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsFullCycleDllWaitSoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsFullCycleDllWaitSoc
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventByFrameSequence
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetLossOfSocEventMgmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[86]"></a>processCsStoppedDllGsInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dllkstatemachine.o(.text.processCsStoppedDllGsInit))
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[87]"></a>processCsStoppedDllWaitPreq</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsStoppedDllWaitPreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsStoppedDllWaitPreq
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[89]"></a>processCsStoppedDllWaitSoa</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsStoppedDllWaitSoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsStoppedDllWaitSoa
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[88]"></a>processCsStoppedDllWaitSoc</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dllkstatemachine.o(.text.processCsStoppedDllWaitSoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processCsStoppedDllWaitSoc
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventOnFrameTimeout
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerLossOfSocEventByFrameSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllkstatemachine.o(.text.dllkstatemachine_changeState)
</UL>
<P><STRONG><a name="[497]"></a>resetLossOfSocEventMgmt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dllkstatemachine.o(.text.resetLossOfSocEventMgmt))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitSoc
</UL>

<P><STRONG><a name="[496]"></a>triggerLossOfSocEventByFrameSequence</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dllkstatemachine.o(.text.triggerLossOfSocEventByFrameSequence))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsStoppedDllWaitSoc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitSoc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitSoa
</UL>

<P><STRONG><a name="[495]"></a>triggerLossOfSocEventOnFrameTimeout</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dllkstatemachine.o(.text.triggerLossOfSocEventOnFrameTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsStoppedDllWaitSoc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsStoppedDllWaitSoa
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsStoppedDllWaitPreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitSoc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitSoa
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCsFullCycleDllWaitPreq
</UL>

<P><STRONG><a name="[2fe]"></a>decrementCnCounters</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, errhndk.o(.text.decrementCnCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = decrementCnCounters &rArr; errhndkcal_getLossSocThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setLossSocThresholdCnt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setCnCrcThresholdCnt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getLossSocThresholdCnt
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnCrcThresholdCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_decrementCounters
</UL>

<P><STRONG><a name="[3a5]"></a>generateHistoryEntry</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, errhndk.o(.text.generateHistoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postHistoryEntryEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossSoc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossPreq
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnCrc
</UL>

<P><STRONG><a name="[3a7]"></a>generateHistoryEntryNodeId</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, errhndk.o(.text.generateHistoryEntryNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = generateHistoryEntryNodeId &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postHistoryEntryEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInvalidFormat
</UL>

<P><STRONG><a name="[3b6]"></a>handleCnCrc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, errhndk.o(.text.handleCnCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = handleCnCrc &rArr; generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setCnCrcCounters
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnCrcError
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postNmtEvent
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
</UL>

<P><STRONG><a name="[3b9]"></a>handleCnLossPreq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, errhndk.o(.text.handleCnLossPreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = handleCnLossPreq &rArr; generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setCnLossPreqCounters
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnLossPreqError
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postNmtEvent
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
</UL>

<P><STRONG><a name="[3bb]"></a>handleCnLossSoc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, errhndk.o(.text.handleCnLossSoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = handleCnLossSoc &rArr; generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setCnLossSocCounters
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getCnLossSocError
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postNmtEvent
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
</UL>

<P><STRONG><a name="[3bd]"></a>handleCorrectPreq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, errhndk.o(.text.handleCorrectPreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handleCorrectPreq &rArr; errhndkcal_getLossPreqThresholdCnt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_setLossPreqThresholdCnt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndkcal_getLossPreqThresholdCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
</UL>

<P><STRONG><a name="[359]"></a>handleDllErrors</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, errhndk.o(.text.handleDllErrors))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = handleDllErrors &rArr; handleCnLossSoc &rArr; generateHistoryEntry &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInvalidFormat
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCorrectPreq
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossSoc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossPreq
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndk_process
</UL>

<P><STRONG><a name="[3bf]"></a>handleInvalidFormat</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, errhndk.o(.text.handleInvalidFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = handleInvalidFormat &rArr; generateHistoryEntryNodeId &rArr; postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postNmtEvent
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntryNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDllErrors
</UL>

<P><STRONG><a name="[3a6]"></a>postHistoryEntryEvent</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, errhndk.o(.text.postHistoryEntryEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = postHistoryEntryEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntryNodeId
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateHistoryEntry
</UL>

<P><STRONG><a name="[3b8]"></a>postNmtEvent</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, errhndk.o(.text.postNmtEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = postNmtEvent &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInvalidFormat
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossSoc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnLossPreq
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCnCrc
</UL>

<P><STRONG><a name="[373]"></a>handleNmtEventInDll</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eventk.o(.text.handleNmtEventInDll))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = handleNmtEventInDll &rArr; dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllk_process
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_process
</UL>

<P><STRONG><a name="[ec]"></a>doStateCsBasicEthernet</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsBasicEthernet))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e6]"></a>doStateCsNotActive</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsNotActive))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[eb]"></a>doStateCsOperational</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsOperational))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e7]"></a>doStateCsPreOperational1</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsPreOperational1))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e9]"></a>doStateCsPreOperational2</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsPreOperational2))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[ea]"></a>doStateCsReadyToOperate</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsReadyToOperate))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e8]"></a>doStateCsStopped</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, nmtk.o(.text.doStateCsStopped))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e2]"></a>doStateGsInitialising</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nmtk.o(.text.doStateGsInitialising))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e1]"></a>doStateGsOff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nmtk.o(.text.doStateGsOff))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e3]"></a>doStateGsResetApplication</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nmtk.o(.text.doStateGsResetApplication))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e4]"></a>doStateGsResetCommunication</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, nmtk.o(.text.doStateGsResetCommunication))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[e5]"></a>doStateGsResetConfiguration</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, nmtk.o(.text.doStateGsResetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[ed]"></a>doStateMsNotActive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtk.o(.text.doStateMsNotActive))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[ee]"></a>doStateRmsNotActive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nmtk.o(.text.doStateRmsNotActive))
<BR>[Address Reference Count : 1]<UL><LI> nmtk.o(.rodata.nmtkStates_l)
</UL>
<P><STRONG><a name="[b5]"></a>cbProcessTpdo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pdok.o(.text.cbProcessTpdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = cbProcessTpdo &rArr; copyTxPdo &rArr; pdokcal_readTxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTxPdo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdok.o(.text.pdok_init)
</UL>
<P><STRONG><a name="[297]"></a>copyTxPdo</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, pdok.o(.text.copyTxPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = copyTxPdo &rArr; pdokcal_readTxPdo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoklut_getChannel
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_readTxPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbProcessTpdo
</UL>

<P><STRONG><a name="[470]"></a>disablePdoChannels</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pdok.o(.text.disablePdoChannels))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdok_allocChannelMem
</UL>

<P><STRONG><a name="[b6]"></a>cbProcessRpdo</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pdokcal.o(.text.cbProcessRpdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = cbProcessRpdo &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventk_postEvent
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdokcal.o(.text.pdokcal_init)
</UL>
<P><STRONG><a name="[482]"></a>setupPdoMemInfo</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pdokcal-triplebufshm.o(.text.setupPdoMemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setupPdoMemInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdokcal_initPdoMem
</UL>

<P><STRONG><a name="[285]"></a>cbBootEvent</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, ctrlu.o(.text.cbBootEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cbBootEvent &rArr; ctrlu_callUserEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbCnCheckEvent
</UL>

<P><STRONG><a name="[96]"></a>cbCnCheckEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ctrlu.o(.text.cbCnCheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cbCnCheckEvent &rArr; cbBootEvent &rArr; ctrlu_callUserEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_getNmtState
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBootEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.initNmtu)
</UL>
<P><STRONG><a name="[81]"></a>cbEventPdoChange</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, ctrlu.o(.text.cbEventPdoChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cbEventPdoChange &rArr; ctrlu_callUserEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.ctrlu_initStack)
</UL>
<P><STRONG><a name="[7f]"></a>cbEventUserObdAccess</STRONG> (Thumb, 18 bytes, Stack size 48 bytes, ctrlu.o(.text.cbEventUserObdAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cbEventUserObdAccess &rArr; ctrlu_callUserEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.ctrlu_initStack)
</UL>
<P><STRONG><a name="[97]"></a>cbNmtStateChange</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, ctrlu.o(.text.cbNmtStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = cbNmtStateChange &rArr; pdou_cbNmtStateChange &rArr; configureAllPdos &rArr; checkAndConfigurePdos &rArr; checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_accessOdPart
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSdoConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.initNmtu)
</UL>
<P><STRONG><a name="[98]"></a>cbObdAccess</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, ctrlu.o(.text.cbObdAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = cbObdAccess &rArr; handleObdLossOfFrameTolerance &rArr; updateDllConfig &rArr; dllucal_setIdentity &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbObdAccess
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_cbObdAccess
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdVerifyConf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdResetCmd
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdLossOfFrameTolerance
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.initObd)
</UL>
<P><STRONG><a name="[294]"></a>handleObdLossOfFrameTolerance</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ctrlu.o(.text.handleObdLossOfFrameTolerance))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = handleObdLossOfFrameTolerance &rArr; updateDllConfig &rArr; dllucal_setIdentity &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDllConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
</UL>

<P><STRONG><a name="[292]"></a>handleObdResetCmd</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ctrlu.o(.text.handleObdResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = handleObdResetCmd &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
</UL>

<P><STRONG><a name="[295]"></a>handleObdVerifyConf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ctrlu.o(.text.handleObdVerifyConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = handleObdVerifyConf &rArr; obdu_writeEntry &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbObdAccess
</UL>

<P><STRONG><a name="[2ef]"></a>initNmtu</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ctrlu.o(.text.initNmtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initNmtu
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_registerStateChangeCb
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtcnu_registerCheckEventCb
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtcnu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[2e4]"></a>initObd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctrlu.o(.text.initObd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = initObd &rArr; obdu_init &rArr; obdu_accessOdPart &rArr; accessOdPartition &rArr; obdu_initVarEntry &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_initStack
</UL>

<P><STRONG><a name="[80]"></a>processUserEvent</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ctrlu.o(.text.processUserEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = processUserEvent &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlu_callUserEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlu.o(.text.ctrlu_initStack)
</UL>
<P><STRONG><a name="[28e]"></a>updateDllConfig</STRONG> (Thumb, 768 bytes, Stack size 248 bytes, ctrlu.o(.text.updateDllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = updateDllConfig &rArr; dllucal_setIdentity &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_setIdentity
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_config
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getNodeId
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleObdLossOfFrameTolerance
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[28d]"></a>updateObd</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, ctrlu.o(.text.updateObd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = updateObd &rArr; obdu_setNodeId &rArr; obdu_writeEntry &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_setNodeId
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[28f]"></a>updateSdoConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ctrlu.o(.text.updateSdoConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = updateSdoConfig &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_setTimeout
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbNmtStateChange
</UL>

<P><STRONG><a name="[341]"></a>handleNotRxAsndFrame</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, dllucal.o(.text.handleNotRxAsndFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleNotRxAsndFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_process
</UL>

<P><STRONG><a name="[3c1]"></a>handleRxAsndFrame</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dllucal.o(.text.handleRxAsndFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handleRxAsndFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrame
</UL>

<P><STRONG><a name="[340]"></a>handleRxAsyncFrame</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dllucal.o(.text.handleRxAsyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handleRxAsyncFrame &rArr; ami_getUint16Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Be
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsndFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_process
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrameInfo
</UL>

<P><STRONG><a name="[342]"></a>handleRxAsyncFrameInfo</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, dllucal.o(.text.handleRxAsyncFrameInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = handleRxAsyncFrameInfo &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmap_unmapKernelBuffer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmap_mapKernelBuffer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxAsyncFrame
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_process
</UL>

<P><STRONG><a name="[346]"></a>sendGenericAsyncFrame</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dllucal.o(.text.sendGenericAsyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sendGenericAsyncFrame &rArr; ami_getUint16Be &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Be
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_sendAsyncFrame
</UL>

<P><STRONG><a name="[344]"></a>setAsndServiceIdFilter</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, dllucal.o(.text.setAsndServiceIdFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_postEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dllucal_regAsndService
</UL>

<P><STRONG><a name="[e]"></a>addInstance</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dllucal-circbuf.o(.text.addInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = addInstance &rArr; circbuf_connect &rArr; circbuf_createInstance &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_connect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[f]"></a>delInstance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dllucal-circbuf.o(.text.delInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = delInstance &rArr; circbuf_disconnect &rArr; circbuf_freeInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_disconnect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[11]"></a>getDataBlock</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dllucal-circbuf.o(.text.getDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = getDataBlock &rArr; circbuf_readData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_readData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[12]"></a>getDataBlockCount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dllucal-circbuf.o(.text.getDataBlockCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = getDataBlockCount &rArr; circbuf_getDataCount &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_getDataCount
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[10]"></a>insertDataBlock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dllucal-circbuf.o(.text.insertDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = insertDataBlock &rArr; circbuf_writeData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[13]"></a>resetDataBlockQueue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dllucal-circbuf.o(.text.resetDataBlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = resetDataBlockQueue &rArr; circbuf_reset &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dllucal-circbuf.o(.data.funcintf_l)
</UL>
<P><STRONG><a name="[365]"></a>linkErrorCounter</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, errhndu.o(.text.linkErrorCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = linkErrorCounter &rArr; obdu_defineVar &rArr; getEntry &rArr; getIndex &rArr; searchIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_defineVar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errhndu_init
</UL>

<P><STRONG><a name="[392]"></a>callApiEventCb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, eventu.o(.text.callApiEventCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = callApiEventCb
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventu_process
</UL>

<P><STRONG><a name="[398]"></a>postEvent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, eventucalintf-circbuf.o(.text.postEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeMultipleData
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_postEventCircbuf
</UL>

<P><STRONG><a name="[404]"></a>processCnStateChange</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nmtu.o(.text.processCnStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = processCnStateChange &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupNmtTimerEvent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_processEvent
</UL>

<P><STRONG><a name="[403]"></a>processGeneralStateChange</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nmtu.o(.text.processGeneralStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = processGeneralStateChange &rArr; nmtu_postNmtEvent &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getNodeId
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_postNmtEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtu_processEvent
</UL>

<P><STRONG><a name="[494]"></a>setupNmtTimerEvent</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nmtu.o(.text.setupNmtTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setupNmtTimerEvent &rArr; timeru_modifyTimer &rArr; timeru_setTimer &rArr; target_getTickCount &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_modifyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCnStateChange
</UL>

<P><STRONG><a name="[408]"></a>accessUserObdfromSdo</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, obdal.o(.text.accessUserObdfromSdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accessUserObdfromSdo
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_processSdoWrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdal_processSdoRead
</UL>

<P><STRONG><a name="[25c]"></a>accessOdPartition</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, obdu.o(.text.accessOdPartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = accessOdPartition &rArr; obdu_initVarEntry &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_initVarEntry
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarEntry
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDefaultPtr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectCurrentPtr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyObjectData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callPostDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_accessOdPart
</UL>

<P><STRONG><a name="[280]"></a>calcOdIndexNum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, obdu.o(.text.calcOdIndexNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calcOdIndexNum
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPartitionIndexNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_init
</UL>

<P><STRONG><a name="[281]"></a>calcPartitionIndexNum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, obdu.o(.text.calcPartitionIndexNum))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcOdIndexNum
</UL>

<P><STRONG><a name="[284]"></a>callObjectCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, obdu.o(.text.callObjectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPost
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocStringDomainObj
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishNonNumWrite
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callPostDefault
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>

<P><STRONG><a name="[261]"></a>callPostDefault</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, obdu.o(.text.callPostDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = callPostDefault &rArr; callObjectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>

<P><STRONG><a name="[2a6]"></a>checkObjectRange</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, obdu.o(.text.checkObjectRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = checkObjectRange &rArr; __aeabi_dcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPost
</UL>

<P><STRONG><a name="[260]"></a>copyObjectData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, obdu.o(.text.copyObjectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copyObjectData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObdStringLen
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>

<P><STRONG><a name="[39f]"></a>finishNonNumWrite</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, obdu.o(.text.finishNonNumWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = finishNonNumWrite &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSegm
</UL>

<P><STRONG><a name="[3a8]"></a>getDataSize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, obdu.o(.text.getDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getDataSize &rArr; getObjectCurrentPtr &rArr; getObjectSize
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectCurrentPtr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObdStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
</UL>

<P><STRONG><a name="[e0]"></a>getDomainSize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, obdu.o(.text.getDomainSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getDomainSize
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obdu.o(.rodata.dataTypeSize_l)
</UL>
<P><STRONG><a name="[3a0]"></a>getEntry</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, obdu.o(.text.getEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getEntry &rArr; getIndex &rArr; searchIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSubindex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishNonNumWrite
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_defineVar
</UL>

<P><STRONG><a name="[3a9]"></a>getIndex</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, obdu.o(.text.getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getIndex &rArr; searchIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getType
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
</UL>

<P><STRONG><a name="[2c7]"></a>getObdStringLen</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, obdu.o(.text.getObdStringLen))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyObjectData
</UL>

<P><STRONG><a name="[25e]"></a>getObjectCurrentPtr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, obdu.o(.text.getObjectCurrentPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getObjectCurrentPtr &rArr; getObjectSize
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>

<P><STRONG><a name="[3a1]"></a>getObjectDataPtr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, obdu.o(.text.getObjectDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDefaultPtr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectCurrentPtr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishNonNumWrite
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>

<P><STRONG><a name="[25d]"></a>getObjectDefaultPtr</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, obdu.o(.text.getObjectDefaultPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
</UL>

<P><STRONG><a name="[25f]"></a>getObjectSize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, obdu.o(.text.getObjectSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getObjectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectCurrentPtr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataSize
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_defineVar
</UL>

<P><STRONG><a name="[df]"></a>getOstringSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, obdu.o(.text.getOstringSize))
<BR>[Address Reference Count : 1]<UL><LI> obdu.o(.rodata.dataTypeSize_l)
</UL>
<P><STRONG><a name="[3aa]"></a>getSubindex</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, obdu.o(.text.getSubindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSubindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getType
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
</UL>

<P><STRONG><a name="[262]"></a>getVarEntry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, obdu.o(.text.getVarEntry))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocStringDomainObj
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDomainSize
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessOdPartition
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_defineVar
</UL>

<P><STRONG><a name="[de]"></a>getVstringSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, obdu.o(.text.getVstringSize))
<BR>[Address Reference Count : 1]<UL><LI> obdu.o(.rodata.dataTypeSize_l)
</UL>
<P><STRONG><a name="[3d0]"></a>initNonNumWrite</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, obdu.o(.text.initNonNumWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = initNonNumWrite &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocStringDomainObj
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSegm
</UL>

<P><STRONG><a name="[40b]"></a>isNumerical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, obdu.o(.text.isNumerical))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
</UL>

<P><STRONG><a name="[40d]"></a>readByIdxInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, obdu.o(.text.readByIdxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = readByIdxInit &rArr; obdu_readEntryToLe &rArr; ami_setTimeOfDay &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntryToLe
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processRead
</UL>

<P><STRONG><a name="[40c]"></a>readByIdxSegm</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, obdu.o(.text.readByIdxSegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = readByIdxSegm &rArr; obdu_getObjectDataPtr &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processRead
</UL>

<P><STRONG><a name="[3d1]"></a>reallocStringDomainObj</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, obdu.o(.text.reallocStringDomainObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reallocStringDomainObj &rArr; callObjectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarEntry
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEntryPre
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
</UL>

<P><STRONG><a name="[3ad]"></a>searchIndex</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, obdu.o(.text.searchIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIndex
</UL>

<P><STRONG><a name="[40f]"></a>writeByIdxInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, obdu.o(.text.writeByIdxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = writeByIdxInit &rArr; obdu_writeEntryFromLe &rArr; writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSegm
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processWrite
</UL>

<P><STRONG><a name="[40e]"></a>writeByIdxSegm</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, obdu.o(.text.writeByIdxSegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = writeByIdxSegm &rArr; writeSegm &rArr; initNonNumWrite &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSegm
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_processWrite
</UL>

<P><STRONG><a name="[413]"></a>writeEntryPost</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, obdu.o(.text.writeEntryPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = writeEntryPost &rArr; checkObjectRange &rArr; __aeabi_dcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkObjectRange
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
</UL>

<P><STRONG><a name="[412]"></a>writeEntryPre</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, obdu.o(.text.writeEntryPre))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = writeEntryPre &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocStringDomainObj
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNumerical
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectSize
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getObjectDataPtr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callObjectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntryFromLe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_writeEntry
</UL>

<P><STRONG><a name="[4fb]"></a>writeSegm</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, obdu.o(.text.writeSegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = writeSegm &rArr; initNonNumWrite &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNonNumWrite
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishNonNumWrite
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxSegm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByIdxInit
</UL>

<P><STRONG><a name="[268]"></a>allocatePdoChannels</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, pdou.o(.text.allocatePdoChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = allocatePdoChannels &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[2c0]"></a>calcPdoMemSize</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pdou.o(.text.calcPdoMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calcPdoMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[282]"></a>callPdoChangeCb</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pdou.o(.text.callPdoChangeCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = callPdoChangeCb &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>

<P><STRONG><a name="[298]"></a>checkAndConfigurePdo</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, pdou.o(.text.checkAndConfigurePdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMappingObjects
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPdoChannelId
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxPdoSize
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configurePdoChannel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPdoValidity
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callPdoChangeCb
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdos
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbObdAccess
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
</UL>

<P><STRONG><a name="[29e]"></a>checkAndConfigurePdos</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pdou.o(.text.checkAndConfigurePdos))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = checkAndConfigurePdos &rArr; checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[29f]"></a>checkAndSetObjectMapping</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, pdou.o(.text.checkAndSetObjectMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeObjectMapping
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_isNumerical
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getType
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getObjectDataPtr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getAccessType
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_getDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMappingObjects
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbObdAccess
</UL>

<P><STRONG><a name="[29a]"></a>checkPdoValidity</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pdou.o(.text.checkPdoValidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = checkPdoValidity &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbObdAccess
</UL>

<P><STRONG><a name="[2bc]"></a>configureAllPdos</STRONG> (Thumb, 150 bytes, Stack size 288 bytes, pdou.o(.text.configureAllPdos))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = configureAllPdos &rArr; checkAndConfigurePdos &rArr; checkAndConfigurePdo &rArr; setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTxPdoChannelTables
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRxPdoChannelTables
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdos
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPdoMemSize
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocatePdoChannels
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_msleep
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postSetupPdoBuffers
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postPdokChannelAlloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_initPdoMem
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_cbNmtStateChange
</UL>

<P><STRONG><a name="[29d]"></a>configurePdoChannel</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, pdou.o(.text.configurePdoChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = configurePdoChannel &rArr; pdoucal_postConfigureChannel &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoucal_postConfigureChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>

<P><STRONG><a name="[2a0]"></a>decodeObjectMapping</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pdou.o(.text.decodeObjectMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decodeObjectMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
</UL>

<P><STRONG><a name="[3a4]"></a>freePdoChannels</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pdou.o(.text.freePdoChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = freePdoChannels &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdou_exit
</UL>

<P><STRONG><a name="[29b]"></a>getMaxPdoSize</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pdou.o(.text.getMaxPdoSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = getMaxPdoSize &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>

<P><STRONG><a name="[299]"></a>getPdoChannelId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pdou.o(.text.getPdoChannelId))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>

<P><STRONG><a name="[29c]"></a>setupMappingObjects</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, pdou.o(.text.setupMappingObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = setupMappingObjects &rArr; checkAndSetObjectMapping &rArr; obdu_isNumerical &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetObjectMapping
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndConfigurePdo
</UL>

<P><STRONG><a name="[2bd]"></a>setupRxPdoChannelTables</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, pdou.o(.text.setupRxPdoChannelTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = setupRxPdoChannelTables &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[2be]"></a>setupTxPdoChannelTables</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, pdou.o(.text.setupTxPdoChannelTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = setupTxPdoChannelTables &rArr; obdu_readEntry &rArr; getObjectDataPtr &rArr; getObjectDefaultPtr &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdu_readEntry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAllPdos
</UL>

<P><STRONG><a name="[b9]"></a>sdoAsndCb</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdoasnd.o(.text.sdoAsndCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdoAsndCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdoasnd.o(.text.sdoasnd_init)
</UL>
<P><STRONG><a name="[2c8]"></a>copyToMultiBuffer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdocomclt.o(.text.copyToMultiBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copyToMultiBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
</UL>

<P><STRONG><a name="[4cb]"></a>initSingleTransfer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sdocomclt.o(.text.initSingleTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_initTransferByIndex
</UL>

<P><STRONG><a name="[491]"></a>prepareMultiRead</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, sdocomclt.o(.text.prepareMultiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = prepareMultiRead &rArr; ami_setUint16Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_initTransferByIndex
</UL>

<P><STRONG><a name="[492]"></a>prepareMultiWrite</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, sdocomclt.o(.text.prepareMultiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = prepareMultiWrite &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_initTransferByIndex
</UL>

<P><STRONG><a name="[49e]"></a>processFrame</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, sdocomclt.o(.text.processFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = processFrame &rArr; processMultiReadResp &rArr; sendSdoAbort &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferFinished
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
</UL>

<P><STRONG><a name="[4a1]"></a>processMultiReadResp</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, sdocomclt.o(.text.processMultiReadResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = processMultiReadResp &rArr; sendSdoAbort &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferFinished
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSdoAbort
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyToMultiBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[4ce]"></a>sendSdo</STRONG> (Thumb, 398 bytes, Stack size 344 bytes, sdocomclt.o(.text.sendSdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sendSdo &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrSegmSize
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_overwriteCmdFrameHdrFlags
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_fillCmdFrameDataSegm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateWaitInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
</UL>

<P><STRONG><a name="[49f]"></a>sendSdoAbort</STRONG> (Thumb, 86 bytes, Stack size 336 bytes, sdocomclt.o(.text.sendSdoAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = sendSdoAbort &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrSegmSize
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrFlag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[4a0]"></a>transferFinished</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, sdocomclt.o(.text.transferFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = transferFinished
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateWaitInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMultiReadResp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFrame
</UL>

<P><STRONG><a name="[4cd]"></a>updateTransferAfterTx</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sdocomclt.o(.text.updateTransferAfterTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateTransferAfterTx &rArr; sdocomint_updateHdlTransfSize &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateSegmTransfer
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomclt_processStateConnected
</UL>

<P><STRONG><a name="[7]"></a>sdoAbortTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoAbortTransfer))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[2]"></a>sdoDefineConnection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoDefineConnection))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[1]"></a>sdoExit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoExit))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[6]"></a>sdoGetNodeId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoGetNodeId))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[5]"></a>sdoGetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoGetState))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[0]"></a>sdoInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoInit))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[3]"></a>sdoInitTransferByIndex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoInitTransferByIndex))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[4]"></a>sdoUndefineConnection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdocom-dummy.o(.text.sdoUndefineConnection))
<BR>[Address Reference Count : 1]<UL><LI> sdocom-dummy.o(.data.dummySdoFunctions)
</UL>
<P><STRONG><a name="[251]"></a>abortMultiTransfer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdocomsrv.o(.text.abortMultiTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadMultiByIndex
</UL>

<P><STRONG><a name="[255]"></a>abortReadByIndexIfSizeInvalid</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sdocomsrv.o(.text.abortReadByIndexIfSizeInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = abortReadByIndexIfSizeInvalid &rArr; abortTransfer &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishReadByIndex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadByIndex
</UL>

<P><STRONG><a name="[253]"></a>abortTransfer</STRONG> (Thumb, 82 bytes, Stack size 336 bytes, sdocomsrv.o(.text.abortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = abortTransfer &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrSegmSize
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrFlag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishReadByIndex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadByIndex
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortReadByIndexIfSizeInvalid
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
</UL>

<P><STRONG><a name="[27c]"></a>assignSdoErrorCode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdocomsrv.o(.text.assignSdoErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assignSdoErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
</UL>

<P><STRONG><a name="[399]"></a>fillCmdFrameDataSegmInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdocomsrv.o(.text.fillCmdFrameDataSegmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fillCmdFrameDataSegmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
</UL>

<P><STRONG><a name="[39a]"></a>finishInitReadByIndex</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sdocomsrv.o(.text.finishInitReadByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = finishInitReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortReadByIndexIfSizeInvalid
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
</UL>

<P><STRONG><a name="[39b]"></a>finishInitReadMultiByIndex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdocomsrv.o(.text.finishInitReadMultiByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = finishInitReadMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
</UL>

<P><STRONG><a name="[39c]"></a>finishInitWriteByIndex</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdocomsrv.o(.text.finishInitWriteByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = finishInitWriteByIndex &rArr; sendAckResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckResponseFrame
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
</UL>

<P><STRONG><a name="[39e]"></a>finishInitWriteMultiByIndex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdocomsrv.o(.text.finishInitWriteMultiByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = finishInitWriteMultiByIndex &rArr; sendAckResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAckResponseFrame
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
</UL>

<P><STRONG><a name="[3a2]"></a>finishReadByIndex</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdocomsrv.o(.text.finishReadByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = finishReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortReadByIndexIfSizeInvalid
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
</UL>

<P><STRONG><a name="[3a3]"></a>finishWriteByIndex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sdocomsrv.o(.text.finishWriteByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = finishWriteByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
</UL>

<P><STRONG><a name="[256]"></a>getSdoErrorCode</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, sdocomsrv.o(.text.getSdoErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortReadByIndexIfSizeInvalid
</UL>

<P><STRONG><a name="[3db]"></a>initReadByIndex</STRONG> (Thumb, 196 bytes, Stack size 384 bytes, sdocomsrv.o(.text.initReadByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = initReadByIndex &rArr; finishInitReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveObdConnectionHdl
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
</UL>

<P><STRONG><a name="[3dd]"></a>initReadMultiByIndex</STRONG> (Thumb, 236 bytes, Stack size 368 bytes, sdocomsrv.o(.text.initReadMultiByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = initReadMultiByIndex &rArr; finishInitReadMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameReadMultiRespAbort
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadMultiByIndex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
</UL>

<P><STRONG><a name="[3e3]"></a>initWriteByIndex</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, sdocomsrv.o(.text.initWriteByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = initWriteByIndex &rArr; finishInitWriteByIndex &rArr; sendAckResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint32Le
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveObdConnectionHdl
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
</UL>

<P><STRONG><a name="[3e4]"></a>initWriteMultiByIndex</STRONG> (Thumb, 388 bytes, Stack size 408 bytes, sdocomsrv.o(.text.initWriteMultiByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameWriteMultiRespAbort
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteMultiByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
</UL>

<P><STRONG><a name="[9a]"></a>obdFinishCb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sdocomsrv.o(.text.obdFinishCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = obdFinishCb &rArr; finishReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdSearchConnection
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishReadByIndex
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteByIndex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sdocomsrv.o(.text.processResponseReadByIndex)
<LI> sdocomsrv.o(.text.processResponseWriteByIndex)
<LI> sdocomsrv.o(.text.initReadByIndex)
<LI> sdocomsrv.o(.text.initWriteByIndex)
</UL>
<P><STRONG><a name="[405]"></a>obdSearchConnection</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sdocomsrv.o(.text.obdSearchConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obdSearchConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obdFinishCb
</UL>

<P><STRONG><a name="[4a5]"></a>processResponseReadByIndex</STRONG> (Thumb, 158 bytes, Stack size 368 bytes, sdocomsrv.o(.text.processResponseReadByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = processResponseReadByIndex &rArr; finishReadByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveObdConnectionHdl
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishReadByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
</UL>

<P><STRONG><a name="[4a6]"></a>processResponseWriteByIndex</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, sdocomsrv.o(.text.processResponseWriteByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = processResponseWriteByIndex &rArr; finishWriteByIndex &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_getUint16Le
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveObdConnectionHdl
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
</UL>

<P><STRONG><a name="[3dc]"></a>saveObdConnectionHdl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sdocomsrv.o(.text.saveObdConnectionHdl))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseWriteByIndex
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processResponseReadByIndex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteByIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadByIndex
</UL>

<P><STRONG><a name="[39d]"></a>sendAckResponseFrame</STRONG> (Thumb, 46 bytes, Stack size 336 bytes, sdocomsrv.o(.text.sendAckResponseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = sendAckResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_overwriteCmdFrameHdrFlags
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteMultiByIndex
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitWriteByIndex
</UL>

<P><STRONG><a name="[252]"></a>sendResponseFrame</STRONG> (Thumb, 252 bytes, Stack size 344 bytes, sdocomsrv.o(.text.sendResponseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCmdFrameHdrSegmTtlSize
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCmdFrameDataSegmInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrSegmSize
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_setCmdFrameHdrFlag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_initCmdFrameGeneric
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_fillCmdFrameDataSegm
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishWriteByIndex
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishReadByIndex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishInitReadByIndex
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortMultiTransfer
</UL>

<P><STRONG><a name="[4d9]"></a>setCmdFrameHdrSegmTtlSize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdocomsrv.o(.text.setCmdFrameHdrSegmTtlSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = setCmdFrameHdrSegmTtlSize &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendResponseFrame
</UL>

<P><STRONG><a name="[3de]"></a>setCmdFrameReadMultiRespAbort</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, sdocomsrv.o(.text.setCmdFrameReadMultiRespAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = setCmdFrameReadMultiRespAbort &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignSdoErrorCode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initReadMultiByIndex
</UL>

<P><STRONG><a name="[3e5]"></a>setCmdFrameWriteMultiRespAbort</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdocomsrv.o(.text.setCmdFrameWriteMultiRespAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = setCmdFrameWriteMultiRespAbort &rArr; ami_setUint32Le &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint32Le
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ami_setUint16Le
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initWriteMultiByIndex
</UL>

<P><STRONG><a name="[4d4]"></a>updateTransferAfterTx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdocomsrv.o(.text.updateTransferAfterTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = updateTransferAfterTx &rArr; sdocomint_updateHdlTransfSize &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_updateHdlTransfSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_processStateServerSegmTrans
</UL>

<P><STRONG><a name="[4b6]"></a>processStateIdle</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sdocom-std.o(.text.processStateIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = processStateIdle &rArr; sdocomsrv_initCon &rArr; initWriteMultiByIndex &rArr; abortMultiTransfer &rArr; sendResponseFrame &rArr; sdoseq_sendData &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomsrv_initCon
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdocomint_processState
</UL>

<P><STRONG><a name="[15]"></a>sdoExit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdocom-std.o(.text.sdoExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sdoExit &rArr; sdoseq_exit &rArr; sdoasnd_exit &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[14]"></a>sdoInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdocom-std.o(.text.sdoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sdoInit &rArr; sdoseq_init &rArr; sdoasnd_init &rArr; dllucal_regAsndService &rArr; setAsndServiceIdFilter &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdocom-std.o(.data.standardSdoFunctions)
</UL>
<P><STRONG><a name="[264]"></a>addFrameToHistory</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sdoseq.o(.text.addFrameToHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addFrameToHistory
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
</UL>

<P><STRONG><a name="[4ae]"></a>checkConnectionAckValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdoseq.o(.text.checkConnectionAckValid))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[4af]"></a>checkHistoryAcked</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sdoseq.o(.text.checkHistoryAcked))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[4b1]"></a>deleteAckedFrameFromHistory</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, sdoseq.o(.text.deleteAckedFrameFromHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deleteAckedFrameFromHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[303]"></a>deleteLowLayerConnection</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdoseq.o(.text.deleteLowLayerConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = deleteLowLayerConnection &rArr; timeru_deleteTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_deleteCon
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
</UL>

<P><STRONG><a name="[4b5]"></a>forceRetransmissionRequest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdoseq.o(.text.forceRetransmissionRequest))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
</UL>

<P><STRONG><a name="[4d8]"></a>getFreeHistoryEntries</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdoseq.o(.text.getFreeHistoryEntries))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
</UL>

<P><STRONG><a name="[4b8]"></a>initHistory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdoseq.o(.text.initHistory))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit3
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit2
</UL>

<P><STRONG><a name="[49c]"></a>processFinalTimeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdoseq.o(.text.processFinalTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = processFinalTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimeoutEvent
</UL>

<P><STRONG><a name="[4a7]"></a>processState</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sdoseq.o(.text.processState))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit3
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit2
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit1
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_processEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveCb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_sendData
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_initCon
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoseq_deleteCon
</UL>

<P><STRONG><a name="[4ac]"></a>processStateConnected</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, sdoseq.o(.text.processStateConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = processStateConnected &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHistoryOldestSegm
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAllTxHistory
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimeoutEvent
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forceRetransmissionRequest
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAckedFrameFromHistory
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHistoryAcked
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkConnectionAckValid
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4a8]"></a>processStateIdle</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sdoseq.o(.text.processStateIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = processStateIdle &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forceRetransmissionRequest
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLowLayerConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4a9]"></a>processStateInit1</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, sdoseq.o(.text.processStateInit1))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = processStateInit1 &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4aa]"></a>processStateInit2</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, sdoseq.o(.text.processStateInit2))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = processStateInit2 &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4ab]"></a>processStateInit3</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, sdoseq.o(.text.processStateInit3))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = processStateInit3 &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4ad]"></a>processStateWaitAck</STRONG> (Thumb, 620 bytes, Stack size 40 bytes, sdoseq.o(.text.processStateWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_deleteTimer
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHistoryOldestSegm
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAllTxHistory
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimeoutEvent
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forceRetransmissionRequest
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAckedFrameFromHistory
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHistoryAcked
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>

<P><STRONG><a name="[4b9]"></a>processSubTimeout</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sdoseq.o(.text.processSubTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToLowerLayer
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimeoutEvent
</UL>

<P><STRONG><a name="[4b4]"></a>processTimeoutEvent</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdoseq.o(.text.processTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSubTimeout
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFinalTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[4ba]"></a>readFromHistory</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, sdoseq.o(.text.readFromHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readFromHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHistoryOldestSegm
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAllTxHistory
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSubTimeout
</UL>

<P><STRONG><a name="[ba]"></a>receiveCb</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, sdoseq.o(.text.receiveCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = receiveCb &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdoseq.o(.text.sdoseq_init)
</UL>
<P><STRONG><a name="[4b2]"></a>sendAllTxHistory</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdoseq.o(.text.sendAllTxHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = sendAllTxHistory &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToLowerLayer
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[49d]"></a>sendFrame</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, sdoseq.o(.text.sendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToLowerLayer
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromHistory
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeHistoryEntries
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFrameToHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSubTimeout
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit3
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit2
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit1
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processFinalTimeout
</UL>

<P><STRONG><a name="[4b3]"></a>sendHistoryOldestSegm</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sdoseq.o(.text.sendHistoryOldestSegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sendHistoryOldestSegm &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToLowerLayer
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[4bb]"></a>sendToLowerLayer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdoseq.o(.text.sendToLowerLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdoasnd_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHistoryOldestSegm
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrame
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAllTxHistory
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSubTimeout
</UL>

<P><STRONG><a name="[4b0]"></a>setTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdoseq.o(.text.setTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setTimer &rArr; timeru_modifyTimer &rArr; timeru_setTimer &rArr; target_getTickCount &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_modifyTimer
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSubTimeout
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateWaitAck
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit3
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit2
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateInit1
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateIdle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStateConnected
</UL>

<P><STRONG><a name="[c0]"></a>syncCb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timesyncu.o(.text.syncCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syncCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timesyncu.o(.text.timesyncu_init)
</UL>
<P><STRONG><a name="[3cb]"></a>initProcessImage</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, app.o(.text.initProcessImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = initProcessImage &rArr; eventlog_printMessage &rArr; eventlog_createMessageString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getRetValStr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_linkProcessImageObject
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getProcessImageOut
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_getProcessImageIn
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_allocProcessImage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initApp
</UL>

<P><STRONG><a name="[498]"></a>processErrorWarningEvent</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, event.o(.text.processErrorWarningEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = processErrorWarningEvent &rArr; eventlog_printErrorEvent &rArr; eventlog_createErrorEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[49a]"></a>processPdoChangeEvent</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, event.o(.text.processPdoChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = processPdoChangeEvent &rArr; eventlog_printPdoMap &rArr; eventlog_createPdoMapString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getRetValStr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oplk_readLocalObject
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoMap
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[499]"></a>processStateChangeEvent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, event.o(.text.processStateChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = processStateChangeEvent &rArr; eventlog_printStateEvent &rArr; eventlog_createStateEventString &rArr; createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugstr_getNmtStateStr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printStateEvent
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[385]"></a>printMessage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eventlog.o(.text.printMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = printMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printMessage
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printStateEvent
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoMap
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printPdoEvent
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_printErrorEvent
</UL>

<P><STRONG><a name="[2cb]"></a>createLogCategoryString</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eventlogstring.o(.text.createLogCategoryString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = createLogCategoryString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoMapString
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoEventString
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createMessageString
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
</UL>

<P><STRONG><a name="[2cc]"></a>createLogLevelString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eventlogstring.o(.text.createLogLevelString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = createLogLevelString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoMapString
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoEventString
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createMessageString
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
</UL>

<P><STRONG><a name="[2cd]"></a>createTimeString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, eventlogstring.o(.text.createTimeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = createTimeString &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createStateEventString
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoMapString
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createPdoEventString
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createMessageString
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventlog_createErrorEventString
</UL>

<P><STRONG><a name="[350]"></a>getLinkStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, edrv-rawsock_stm32.o(.text.getLinkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = getLinkStatus &rArr; getPHYCFGR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPHYCFGR
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
</UL>

<P><STRONG><a name="[34b]"></a>getMacAdrs</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, edrv-rawsock_stm32.o(.text.getMacAdrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = getMacAdrs &rArr; getSHAR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSHAR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_init
</UL>

<P><STRONG><a name="[352]"></a>packetHandler</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, edrv-rawsock_stm32.o(.text.packetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = packetHandler &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_sendTxBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workerThread
</UL>

<P><STRONG><a name="[8e]"></a>workerThread</STRONG> (Thumb, 88 bytes, Stack size 1560 bytes, edrv-rawsock_stm32.o(.text.workerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = workerThread &rArr; packetHandler &rArr; trace &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edrv-rawsock_stm32.o(.text.edrv_init)
</UL>
<P><STRONG><a name="[91]"></a>eventThread</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, eventkcal-stm32.o(.text.eventThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = eventThread &rArr; eventkcal_processEventCircbuf &rArr; eventk_process &rArr; nmtk_process &rArr; dllk_process &rArr; processNmtStateChange &rArr; controlTimeSync &rArr; eventk_postEvent &rArr; eventkcal_postUserEvent &rArr; eventkcal_postEventCircbuf &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_processEventCircbuf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventkcal_getEventCountCircbuf
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventkcal-stm32.o(.text.eventkcal_init)
</UL>
<P><STRONG><a name="[90]"></a>signalKernelEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventkcal-stm32.o(.text.signalKernelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = signalKernelEvent &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventkcal-stm32.o(.text.eventkcal_init)
</UL>
<P><STRONG><a name="[8f]"></a>signalUserEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventkcal-stm32.o(.text.signalUserEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = signalUserEvent &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventkcal-stm32.o(.text.eventkcal_init)
</UL>
<P><STRONG><a name="[95]"></a>timerCallback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hrestimer-stm32.o(.text.timerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_stopTimer
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edrv_restartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hrestimer-stm32.o(.text.hrestimer_modifyTimer)
</UL>
<P><STRONG><a name="[94]"></a>eventThread</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, eventucal-stm32.o(.text.eventThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = eventThread &rArr; eventucal_processEventCircbuf &rArr; eventu_process &rArr; sdoseq_processEvent &rArr; processState &rArr; processStateWaitAck &rArr; processTimeoutEvent &rArr; processSubTimeout &rArr; sendFrame &rArr; sendToLowerLayer &rArr; sdoasnd_sendData &rArr; dllucal_sendAsyncFrame &rArr; eventu_postEvent &rArr; eventucal_postUserEvent &rArr; eventucal_postEventCircbuf &rArr; postEvent &rArr; circbuf_writeMultipleData &rArr; circbuf_unlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_processEventCircbuf
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventucal_getEventCountCircbuf
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventucal-stm32.o(.text.eventucal_init)
</UL>
<P><STRONG><a name="[92]"></a>signalKernelEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.signalKernelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = signalKernelEvent &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventucal-stm32.o(.text.eventucal_init)
</UL>
<P><STRONG><a name="[93]"></a>signalUserEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventucal-stm32.o(.text.signalUserEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = signalUserEvent &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventucal-stm32.o(.text.eventucal_init)
</UL>
<P><STRONG><a name="[4ef]"></a>adjustStartTime</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timer-stm32user.o(.text.adjustStartTime))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeru_setTimer
</UL>

<P><STRONG><a name="[421]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_delay.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[422]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[a0]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[424]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[425]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[426]"></a>IsPrivileged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[22c]"></a>SVC_Setup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_kernel.o(.text.SVC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[22d]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
</UL>

<P><STRONG><a name="[4e3]"></a>osRtxKernelState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelState))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[a1]"></a>svcRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[a2]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[a3]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[a4]"></a>svcRtxKernelStart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[247]"></a>os_kernel_is_active</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[431]"></a>MemBlockPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_memory.o(.text.MemBlockPtr))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[432]"></a>MemHeadPtr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_memory.o(.text.MemHeadPtr))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[27d]"></a>atomic_dec32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_dec32))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
</UL>

<P><STRONG><a name="[27e]"></a>atomic_inc32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>

<P><STRONG><a name="[27f]"></a>atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_link_get))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>

<P><STRONG><a name="[436]"></a>atomic_link_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_mempool.o(.text.atomic_link_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[42a]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[42b]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[213]"></a>MessageQueueGet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[216]"></a>MessageQueuePut</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[438]"></a>MessageQueueRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[214]"></a>atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_dec32_nz))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[217]"></a>atomic_inc32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[215]"></a>atomic_wr8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_wr8))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[3e6]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[3ea]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[3e7]"></a>osRtxMessageQueueId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueId))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[bc]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[3e8]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[4e7]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[a5]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[43d]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[a6]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[42d]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_mutex.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[42e]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mutex.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[4e8]"></a>osRtxMutexId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxMutexId))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[43f]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[4e9]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[a7]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[a8]"></a>svcRtxMutexDelete</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[a9]"></a>svcRtxMutexNew</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[aa]"></a>svcRtxMutexRelease</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[468]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[469]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[22e]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[230]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[22f]"></a>atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.atomic_dec16_nz))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[231]"></a>atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[3ec]"></a>isrRtxSemaphoreAcquire</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.isrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = isrRtxSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[3ee]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[3ef]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[3ed]"></a>osRtxSemaphoreId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osRtxSemaphoreId))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[bd]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[4ea]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[ad]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[ae]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[af]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[b0]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[448]"></a>SetPendSV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[3f1]"></a>atomic_dec16_nz</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_system.o(.text.atomic_dec16_nz))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[3f2]"></a>atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_system.o(.text.atomic_inc16_lim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[3f5]"></a>atomic_inc16_lt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_system.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[3f0]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(.text.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_get &rArr; atomic_inc16_lim
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[3f4]"></a>isr_queue_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_system.o(.text.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[444]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxEventFlagsObject))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[463]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[446]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[442]"></a>osRtxMessageObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxMessageObject))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[3f3]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[445]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxSemaphoreObject))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[443]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[46b]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[46c]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[45c]"></a>StackOffsetR0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.StackOffsetR0))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
</UL>

<P><STRONG><a name="[232]"></a>ThreadFlagsCheck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsCheck &rArr; atomic_chk32_any
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_any
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[234]"></a>atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(.text.atomic_chk32_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[233]"></a>atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_thread.o(.text.atomic_chk32_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_any
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[44e]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxEventFlagsObject))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[457]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[451]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[452]"></a>osRtxMessageQueueObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMessageQueueObject))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[44f]"></a>osRtxMutexObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMutexObject))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[44d]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[450]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxSemaphoreObject))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[449]"></a>osRtxThreadBlock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[460]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[461]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[455]"></a>osRtxThreadDestroy</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[456]"></a>osRtxThreadFree</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[458]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[45e]"></a>osRtxThreadId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadId))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>

<P><STRONG><a name="[45a]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[44c]"></a>osRtxThreadListRoot</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[44a]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[bf]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[4eb]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[b1]"></a>svcRtxThreadExit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[b2]"></a>svcRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[b3]"></a>svcRtxThreadNew</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[b4]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[467]"></a>TimerInsert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[465]"></a>TimerUnlink</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[464]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_timer.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[466]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_timer.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[ac]"></a>osRtxTimerTick</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[227]"></a>Disable_SPI_Clock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.Disable_SPI_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[224]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, spi_stm32f4xx.o(.text.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[228]"></a>Enable_SPI_Clock</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, spi_stm32f4xx.o(.text.Enable_SPI_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Enable_SPI_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[cd]"></a>SPI2_Control</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SPI2_Control &rArr; SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[cc]"></a>SPI2_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[ce]"></a>SPI2_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c6]"></a>SPI2_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c8]"></a>SPI2_PowerControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SPI2_PowerControl &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[ca]"></a>SPI2_Receive</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c9]"></a>SPI2_Send</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[cb]"></a>SPI2_Transfer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c7]"></a>SPI2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SPI2_Uninitialize &rArr; SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c5]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[c4]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPIX_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[218]"></a>SPI_Control</STRONG> (Thumb, 1068 bytes, Stack size 64 bytes, spi_stm32f4xx.o(.text.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Control
</UL>

<P><STRONG><a name="[219]"></a>SPI_GetDataCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetDataCount
</UL>

<P><STRONG><a name="[21a]"></a>SPI_GetStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPI_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetStatus
</UL>

<P><STRONG><a name="[21b]"></a>SPI_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[21c]"></a>SPI_Initialize</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, spi_stm32f4xx.o(.text.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Initialize
</UL>

<P><STRONG><a name="[222]"></a>SPI_PeripheralReset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPI_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[21d]"></a>SPI_PowerControl</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_Clock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_Clock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_PowerControl
</UL>

<P><STRONG><a name="[21e]"></a>SPI_Receive</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Receive
</UL>

<P><STRONG><a name="[225]"></a>SPI_RxData</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPI_RxData))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[21f]"></a>SPI_Send</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send
</UL>

<P><STRONG><a name="[220]"></a>SPI_Transfer</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Transfer
</UL>

<P><STRONG><a name="[226]"></a>SPI_TxData</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.SPI_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>SPI_Uninitialize</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SPI_Uninitialize &rArr; SPI_PowerControl &rArr; SPI_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Uninitialize
</UL>

<P><STRONG><a name="[229]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[22a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_stm32f4xx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[242]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 500 bytes, Stack size 4 bytes, usart_stm32f4xx.o(.text.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[d9]"></a>USART1_Control</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USART1_Control &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d0]"></a>USART1_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART1_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[dc]"></a>USART1_GetModemStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d8]"></a>USART1_GetRxCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[da]"></a>USART1_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d7]"></a>USART1_GetTxCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d1]"></a>USART1_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = USART1_Initialize &rArr; USART_Initialize &rArr; Enable_GPIO_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d3]"></a>USART1_PowerControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART1_PowerControl &rArr; USART_PowerControl &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d5]"></a>USART1_Receive</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Receive &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d4]"></a>USART1_Send</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[db]"></a>USART1_SetModemControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d6]"></a>USART1_Transfer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_Transfer &rArr; USART_Transfer &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[d2]"></a>USART1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = USART1_Uninitialize &rArr; USART_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[235]"></a>USART_Control</STRONG> (Thumb, 1644 bytes, Stack size 64 bytes, usart_stm32f4xx.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + In Cycle
<LI>Call Chain = USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
</UL>

<P><STRONG><a name="[236]"></a>USART_GetModemStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_GetModemStatus))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetModemStatus
</UL>

<P><STRONG><a name="[237]"></a>USART_GetRxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetRxCount
</UL>

<P><STRONG><a name="[238]"></a>USART_GetStatus</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetStatus
</UL>

<P><STRONG><a name="[239]"></a>USART_GetTxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetTxCount
</UL>

<P><STRONG><a name="[23b]"></a>USART_Initialize</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = USART_Initialize &rArr; Enable_GPIO_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>

<P><STRONG><a name="[245]"></a>USART_PeripheralReset</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[23c]"></a>USART_PowerControl</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, usart_stm32f4xx.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART_PowerControl &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PeripheralReset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PowerControl
</UL>

<P><STRONG><a name="[23d]"></a>USART_Receive</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, usart_stm32f4xx.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Receive
</UL>

<P><STRONG><a name="[23e]"></a>USART_Send</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_Send))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>

<P><STRONG><a name="[23f]"></a>USART_SetModemControl</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_SetModemControl))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SetModemControl
</UL>

<P><STRONG><a name="[240]"></a>USART_Transfer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Transfer &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Transfer
</UL>

<P><STRONG><a name="[241]"></a>USART_Uninitialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = USART_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
</UL>

<P><STRONG><a name="[cf]"></a>USARTx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[243]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[244]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[1af]"></a>EventCheckFilter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1aa]"></a>EventGetTS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventGetTS &rArr; UpdateTS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1b0]"></a>EventRecordItem</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1b2]"></a>GetContext</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[1b3]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRecordIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1ad]"></a>IncrementOverflowTS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementOverflowTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementOverflowTS
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1b7]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementRecordsDumped
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1b6]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementRecordsWritten
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1b4]"></a>LockRecord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1b5]"></a>UnlockRecord</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1ac]"></a>UpdateTS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateTS
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[201]"></a>atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[200]"></a>atomic_inc8</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_inc8))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[246]"></a>atomic_xch32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_xch32))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[203]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[13c]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[13b]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[169]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
</UL>

<P><STRONG><a name="[16d]"></a>_findweek</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[16a]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[16c]"></a>_weekbasedyear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _weekbasedyear &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[7c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_extend_threads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[182]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[193]"></a>_freopen_locked</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
