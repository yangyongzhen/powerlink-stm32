<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\testPowerlink.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\testPowerlink.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat May 27 00:19:11 2023
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[ca]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12e]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12e]">atomic_inc32</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[56]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">osRtxIdleThread</a><BR>
 <LI><a href="#[175]">atomic_dec32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[175]">atomic_dec32</a><BR>
 <LI><a href="#[177]">atomic_link_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">atomic_link_get</a><BR>
 <LI><a href="#[176]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[176]">atomic_inc32</a><BR>
 <LI><a href="#[1a0]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a0]">osRtxErrorNotify</a><BR>
 <LI><a href="#[138]">atomic_dec32_nz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">atomic_dec32_nz</a><BR>
 <LI><a href="#[4a]">LED_Blink_PortD</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">LED_Blink_PortD</a><BR>
 <LI><a href="#[13b]">atomic_inc32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13b]">atomic_inc32</a><BR>
 <LI><a href="#[15f]">USART_Send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15e]">USART_Receive</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from dma_stm32f10x.o(.text.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from dma_stm32f10x.o(.text.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from dma_stm32f10x.o(.text.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from dma_stm32f10x.o(.text.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from dma_stm32f10x.o(.text.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">LED_Blink_PortD</a> from main.o(.text.LED_Blink_PortD) referenced 2 times from main.o(.text.main)
 <LI><a href="#[4b]">LED_Blink_PortE</a> from main.o(.text.LED_Blink_PortE) referenced 2 times from main.o(.text.main)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from spi_stm32f10x.o(.text.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">SPI2_Control</a> from spi_stm32f10x.o(.text.SPI2_Control) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[6a]">SPI2_GetDataCount</a> from spi_stm32f10x.o(.text.SPI2_GetDataCount) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[6c]">SPI2_GetStatus</a> from spi_stm32f10x.o(.text.SPI2_GetStatus) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from spi_stm32f10x.o(.text.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">SPI2_Initialize</a> from spi_stm32f10x.o(.text.SPI2_Initialize) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[66]">SPI2_PowerControl</a> from spi_stm32f10x.o(.text.SPI2_PowerControl) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[68]">SPI2_Receive</a> from spi_stm32f10x.o(.text.SPI2_Receive) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[67]">SPI2_Send</a> from spi_stm32f10x.o(.text.SPI2_Send) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[69]">SPI2_Transfer</a> from spi_stm32f10x.o(.text.SPI2_Transfer) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[65]">SPI2_Uninitialize</a> from spi_stm32f10x.o(.text.SPI2_Uninitialize) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from spi_stm32f10x.o(.text.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">SPIX_GetCapabilities</a> from spi_stm32f10x.o(.text.SPIX_GetCapabilities) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[62]">SPIX_GetVersion</a> from spi_stm32f10x.o(.text.SPIX_GetVersion) referenced from spi_stm32f10x.o(.rodata.Driver_SPI2)
 <LI><a href="#[6]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from usart_stm32f10x.o(.text.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from usart_stm32f10x.o(.text.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">USART1_Callback</a> from main.o(.text.USART1_Callback) referenced 2 times from main.o(.text.uart_init)
 <LI><a href="#[77]">USART1_Control</a> from usart_stm32f10x.o(.text.USART1_Control) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[6e]">USART1_GetCapabilities</a> from usart_stm32f10x.o(.text.USART1_GetCapabilities) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[7a]">USART1_GetModemStatus</a> from usart_stm32f10x.o(.text.USART1_GetModemStatus) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[76]">USART1_GetRxCount</a> from usart_stm32f10x.o(.text.USART1_GetRxCount) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[78]">USART1_GetStatus</a> from usart_stm32f10x.o(.text.USART1_GetStatus) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[75]">USART1_GetTxCount</a> from usart_stm32f10x.o(.text.USART1_GetTxCount) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart_stm32f10x.o(.text.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">USART1_Initialize</a> from usart_stm32f10x.o(.text.USART1_Initialize) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[71]">USART1_PowerControl</a> from usart_stm32f10x.o(.text.USART1_PowerControl) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[73]">USART1_Receive</a> from usart_stm32f10x.o(.text.USART1_Receive) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[72]">USART1_Send</a> from usart_stm32f10x.o(.text.USART1_Send) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[79]">USART1_SetModemControl</a> from usart_stm32f10x.o(.text.USART1_SetModemControl) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[74]">USART1_Transfer</a> from usart_stm32f10x.o(.text.USART1_Transfer) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[70]">USART1_Uninitialize</a> from usart_stm32f10x.o(.text.USART1_Uninitialize) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart_stm32f10x.o(.text.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart_stm32f10x.o(.text.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">USARTx_GetVersion</a> from usart_stm32f10x.o(.text.USARTx_GetVersion) referenced from usart_stm32f10x.o(.rodata.Driver_USART1)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[48]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5b]">mySPI_callback</a> from main.o(.text.mySPI_callback) referenced 2 times from main.o(.text.spi_init)
 <LI><a href="#[56]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[5c]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[5e]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[61]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[60]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[57]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[5d]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[4c]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[4d]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[4e]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[4f]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[50]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[51]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[52]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[53]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[54]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[55]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[58]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[59]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[5a]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1eb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ec]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[92]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[85]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[87]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[200]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[201]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[202]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[203]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[97]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[8b]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[91]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[93]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[96]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[98]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9e]"></a>malloc_internal$concurrent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a0]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[a2]"></a>free_internal$concurrent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[a3]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[a4]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[a7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[aa]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[213]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[173]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[216]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[219]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[b1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[86]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[b3]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[21d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_threads.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[88]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[8a]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[d3]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[99]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[21e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, h1_extend_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[bb]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1ea]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[220]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[221]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[b6]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c6]"></a>_fopen$locked</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[b7]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[b2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[222]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8c]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[a5]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c5]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[225]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[c0]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[c1]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[bc]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[cf]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, puts_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
</UL>

<P><STRONG><a name="[95]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c8]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[c7]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[c9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[cb]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[cc]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[226]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[227]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>DMA1_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>DMA1_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>DMA1_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>DMA1_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>DMA1_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>DMA1_Channel6_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel6_Event))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>DMA1_Channel7_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA1_Channel7_Event))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>DMA2_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA2_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>DMA2_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA2_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>DMA2_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA2_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_Event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>DMA2_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA2_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>DMA2_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text.DMA2_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>EventRecord2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
</UL>

<P><STRONG><a name="[e8]"></a>EventRecord4</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>

<P><STRONG><a name="[e2]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ef]"></a>EvrRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[f0]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[f1]"></a>EvrRtxDelayError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[f2]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[f3]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[f4]"></a>EvrRtxKernelError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[f5]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[f6]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[f7]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[f8]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[f9]"></a>EvrRtxKernelStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[fa]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[fb]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[fc]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[fd]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[fe]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[ff]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[100]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[101]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[102]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[103]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[104]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[105]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[106]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[107]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[108]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[109]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[10a]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[10b]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[10c]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[10d]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[10e]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[10f]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquire &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[110]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[111]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[112]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[113]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[114]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexDelete &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[115]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexDestroyed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[116]"></a>EvrRtxMutexError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[117]"></a>EvrRtxMutexNew</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[118]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[119]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[11a]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[11b]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[11c]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[11d]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[11e]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[11f]"></a>EvrRtxThreadError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[120]"></a>EvrRtxThreadExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[121]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[122]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[123]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[124]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[125]"></a>EvrRtxThreadNew</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[126]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[127]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[128]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[129]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[148]"></a>GPIO_AFConfigure</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, gpio_stm32f10x.o(.text.GPIO_AFConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[12b]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gpio_stm32f10x.o(.text.GPIO_GetPortClockState))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[12a]"></a>GPIO_PinConfigure</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gpio_stm32f10x.o(.text.GPIO_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_PortClock</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, gpio_stm32f10x.o(.text.GPIO_PortClock))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[12f]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_conf.o(.text.IINCHIP_SpiSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>

<P><STRONG><a name="[135]"></a>LED_Initialize</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, led.o(.text.LED_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>LED_Off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(.text.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortD
</UL>

<P><STRONG><a name="[131]"></a>LED_On</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text.LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortD
</UL>

<P><STRONG><a name="[1d2]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1e3]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1e2]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI3_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>SPI_IRQHandler</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, spi_stm32f10x.o(.text.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>SPI_SendByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_conf.o(.text.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_SendByte &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>

<P><STRONG><a name="[18c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>USART_IRQHandler</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, usart_stm32f10x.o(.text.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>__user_perthread_libspace</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[7c]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[7e]"></a>_mutex_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[7b]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[7d]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[90]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[c2]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[be]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[bf]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[c4]"></a>_sys_open</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[cd]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[ce]"></a>_sys_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1db]"></a>delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utility.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
</UL>

<P><STRONG><a name="[1da]"></a>delay_us</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utility.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
</UL>

<P><STRONG><a name="[178]"></a>getGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getGAR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[17a]"></a>getSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getSIPR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[17b]"></a>getSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.getSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getSUBR &rArr; wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[17c]"></a>iinchip_csoff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500_conf.o(.text.iinchip_csoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iinchip_csoff &rArr; wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>

<P><STRONG><a name="[17e]"></a>iinchip_cson</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500_conf.o(.text.iinchip_cson))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iinchip_cson &rArr; wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>

<P><STRONG><a name="[94]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5b]"></a>mySPI_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.mySPI_callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.spi_init)
</UL>
<P><STRONG><a name="[132]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortD
</UL>

<P><STRONG><a name="[195]"></a>osKernelGetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[172]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[192]"></a>osKernelStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>osMessageQueueGet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[19d]"></a>osMessageQueuePut</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[16e]"></a>osMutexAcquire</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[16f]"></a>osMutexDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[170]"></a>osMutexNew</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[171]"></a>osMutexRelease</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[1a0]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[56]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[16d]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[199]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1a1]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1a4]"></a>osRtxMemoryFree</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1a5]"></a>osRtxMemoryInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[185]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1a6]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_put
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1a8]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1ad]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[1af]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1b1]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9a]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageObject
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[183]"></a>osRtxPostProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1bc]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxMutexAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexObject
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueObject
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>osRtxThreadDispatch</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1aa]"></a>osRtxThreadListGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1cc]"></a>osRtxThreadListPut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1c4]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1b2]"></a>osRtxThreadListSort</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1c5]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ac]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1cd]"></a>osRtxThreadStartup</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1ca]"></a>osRtxThreadSwitch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1cf]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1ab]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[9b]"></a>osRtxTick_Handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[61]"></a>osRtxTimerSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[60]"></a>osRtxTimerThread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[5d]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[16c]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[191]"></a>osThreadNew</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>reset_w5500</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500_conf.o(.text.reset_w5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_w5500 &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>setGAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setGAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[1de]"></a>setSHAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSHAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
</UL>

<P><STRONG><a name="[1df]"></a>setSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSIPR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[1e0]"></a>setSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(.text.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setSUBR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[134]"></a>set_w5500_ip</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, w5500_conf.o(.text.set_w5500_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortE
</UL>

<P><STRONG><a name="[190]"></a>set_w5500_mac</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w5500_conf.o(.text.set_w5500_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_w5500_mac &rArr; setSHAR &rArr; wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>spi_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>spi_send_byte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>

<P><STRONG><a name="[174]"></a>stdout_putchar</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stdout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[18d]"></a>uart_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>wiz_cs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w5500_conf.o(.text.wiz_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wiz_cs &rArr; LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
</UL>

<P><STRONG><a name="[179]"></a>wiz_read_buf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5500_conf.o(.text.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiz_read_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
</UL>

<P><STRONG><a name="[1dd]"></a>wiz_write_buf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5500_conf.o(.text.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiz_write_buf &rArr; puts &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_cson
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_csoff
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
</UL>

<P><STRONG><a name="[a8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[49]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>LED_Blink_PortD</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text.LED_Blink_PortD))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = LED_Blink_PortD &rArr;  LED_Blink_PortD (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortD
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_PortD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4b]"></a>LED_Blink_PortE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text.LED_Blink_PortE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LED_Blink_PortE &rArr; set_w5500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[5f]"></a>USART1_Callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text.USART1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.uart_init)
</UL>
<P><STRONG><a name="[136]"></a>GPIO_PinWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
</UL>

<P><STRONG><a name="[193]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_delay.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[194]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[4c]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[196]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[197]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[198]"></a>IsPrivileged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[14e]"></a>SVC_Setup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_kernel.o(.text.SVC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[14f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
</UL>

<P><STRONG><a name="[1e1]"></a>osRtxKernelState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelState))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[4d]"></a>svcRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelState
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[4e]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[4f]"></a>svcRtxKernelStart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[16b]"></a>os_kernel_is_active</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[1a2]"></a>MemBlockPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_memory.o(.text.MemBlockPtr))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[1a3]"></a>MemHeadPtr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_memory.o(.text.MemHeadPtr))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[175]"></a>atomic_dec32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_dec32))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
</UL>

<P><STRONG><a name="[176]"></a>atomic_inc32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>

<P><STRONG><a name="[177]"></a>atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.text.atomic_link_get))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
</UL>

<P><STRONG><a name="[1a7]"></a>atomic_link_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_mempool.o(.text.atomic_link_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[19b]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[19c]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[137]"></a>MessageQueueGet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[13a]"></a>MessageQueuePut</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1a9]"></a>MessageQueueRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[138]"></a>atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_dec32_nz))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[13b]"></a>atomic_inc32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[139]"></a>atomic_wr8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.atomic_wr8))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[17f]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[184]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[180]"></a>osRtxMessageQueueId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueId))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[5c]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[182]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1e5]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[50]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[1ae]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[51]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[19e]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_mutex.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[19f]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mutex.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[1e7]"></a>osRtxMutexId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxMutexId))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1b0]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1e8]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[52]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[53]"></a>svcRtxMutexDelete</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[54]"></a>svcRtxMutexNew</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[55]"></a>svcRtxMutexRelease</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[1b9]"></a>SetPendSV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[187]"></a>atomic_dec16_nz</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_system.o(.text.atomic_dec16_nz))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[188]"></a>atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_system.o(.text.atomic_inc16_lim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[18b]"></a>atomic_inc16_lt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_system.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[186]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(.text.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_get &rArr; atomic_inc16_lim
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[18a]"></a>isr_queue_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_system.o(.text.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[1b5]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxEventFlagsObject))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>osRtxMessageObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxMessageObject))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[189]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[1b6]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxSemaphoreObject))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>IsException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[1d9]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[152]"></a>ThreadFlagsCheck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsCheck &rArr; atomic_chk32_any
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_any
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[154]"></a>atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(.text.atomic_chk32_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[153]"></a>atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_thread.o(.text.atomic_chk32_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_chk32_any
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[1bf]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxEventFlagsObject))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1c8]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c2]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1c3]"></a>osRtxMessageQueueObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMessageQueueObject))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1c0]"></a>osRtxMutexObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxMutexObject))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1be]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1c1]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxSemaphoreObject))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ba]"></a>osRtxThreadBlock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[1d0]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1d1]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[1c6]"></a>osRtxThreadDestroy</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c7]"></a>osRtxThreadFree</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[1c9]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1ce]"></a>osRtxThreadId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadId))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>

<P><STRONG><a name="[1cb]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1bd]"></a>osRtxThreadListRoot</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1bb]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[5e]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1e9]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[58]"></a>svcRtxThreadExit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[59]"></a>svcRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[5a]"></a>svcRtxThreadNew</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[1d7]"></a>TimerInsert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1d5]"></a>TimerUnlink</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1d4]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_timer.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1d6]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_timer.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[57]"></a>osRtxTimerTick</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[146]"></a>DMA_ChannelDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.DMA_ChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[147]"></a>GPIO_PinWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[6b]"></a>SPI2_Control</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI2_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[6a]"></a>SPI2_GetDataCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[6c]"></a>SPI2_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[64]"></a>SPI2_Initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI2_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[66]"></a>SPI2_PowerControl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_PowerControl &rArr; SPI_PowerControl &rArr; SPI_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[68]"></a>SPI2_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[67]"></a>SPI2_Send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[69]"></a>SPI2_Transfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[65]"></a>SPI2_Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI2_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[63]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[62]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPIX_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[13d]"></a>SPI_Control</STRONG> (Thumb, 838 bytes, Stack size 32 bytes, spi_stm32f10x.o(.text.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Control
</UL>

<P><STRONG><a name="[13e]"></a>SPI_GetDataCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetDataCount
</UL>

<P><STRONG><a name="[13f]"></a>SPI_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPI_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetStatus
</UL>

<P><STRONG><a name="[140]"></a>SPI_Initialize</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Initialize
</UL>

<P><STRONG><a name="[149]"></a>SPI_PeripheralReset</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[141]"></a>SPI_PowerControl</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_PowerControl &rArr; SPI_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_PowerControl
</UL>

<P><STRONG><a name="[142]"></a>SPI_Receive</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPI_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Receive
</UL>

<P><STRONG><a name="[143]"></a>SPI_Send</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.SPI_Send))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send
</UL>

<P><STRONG><a name="[144]"></a>SPI_Transfer</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Transfer
</UL>

<P><STRONG><a name="[145]"></a>SPI_Uninitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Uninitialize
</UL>

<P><STRONG><a name="[14b]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[14a]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[14c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[163]"></a>DMA_ChannelDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.DMA_ChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[164]"></a>GPIO_PinRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>

<P><STRONG><a name="[169]"></a>GPIO_PinWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>

<P><STRONG><a name="[77]"></a>USART1_Control</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1_Control &rArr; USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[6e]"></a>USART1_GetCapabilities</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[7a]"></a>USART1_GetModemStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[76]"></a>USART1_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[78]"></a>USART1_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[75]"></a>USART1_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[6f]"></a>USART1_Initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = USART1_Initialize &rArr; USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[71]"></a>USART1_PowerControl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_PowerControl &rArr; USART_PowerControl &rArr; USART_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[73]"></a>USART1_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[72]"></a>USART1_Send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[79]"></a>USART1_SetModemControl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[74]"></a>USART1_Transfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[70]"></a>USART1_Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_Uninitialize &rArr; USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[156]"></a>USART_Control</STRONG> (Thumb, 1670 bytes, Stack size 64 bytes, usart_stm32f10x.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
</UL>

<P><STRONG><a name="[157]"></a>USART_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.USART_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetCapabilities
</UL>

<P><STRONG><a name="[158]"></a>USART_GetModemStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetModemStatus
</UL>

<P><STRONG><a name="[159]"></a>USART_GetRxCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.USART_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetRxCount
</UL>

<P><STRONG><a name="[15a]"></a>USART_GetStatus</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetStatus
</UL>

<P><STRONG><a name="[15b]"></a>USART_GetTxCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.USART_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetTxCount
</UL>

<P><STRONG><a name="[15c]"></a>USART_Initialize</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>

<P><STRONG><a name="[165]"></a>USART_PeripheralReset</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usart_stm32f10x.o(.text.USART_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[15d]"></a>USART_PowerControl</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_PowerControl &rArr; USART_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PowerControl
</UL>

<P><STRONG><a name="[15e]"></a>USART_Receive</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Receive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>

<P><STRONG><a name="[15f]"></a>USART_Send</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>

<P><STRONG><a name="[160]"></a>USART_SetModemControl</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SetModemControl
</UL>

<P><STRONG><a name="[161]"></a>USART_Transfer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usart_stm32f10x.o(.text.USART_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Transfer
</UL>

<P><STRONG><a name="[162]"></a>USART_Uninitialize</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart_stm32f10x.o(.text.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
</UL>

<P><STRONG><a name="[6d]"></a>USARTx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[167]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[166]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[168]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_stm32f10x.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[e6]"></a>EventCheckFilter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[e1]"></a>EventGetTS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventGetTS &rArr; UpdateTS
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[e7]"></a>EventRecordItem</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[e9]"></a>GetContext</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[ea]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRecordIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[e4]"></a>IncrementOverflowTS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementOverflowTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementOverflowTS
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ee]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementRecordsDumped
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[ed]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IncrementRecordsWritten
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[eb]"></a>LockRecord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[ec]"></a>UnlockRecord</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[e3]"></a>UpdateTS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateTS
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[12e]"></a>atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[12d]"></a>atomic_inc8</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_inc8))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[16a]"></a>atomic_xch32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(.text.atomic_xch32))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[150]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[151]"></a>SetSysClockTo72</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[9d]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[9c]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[48]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_extend_threads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[c3]"></a>_freopen_locked</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
